100 WIDTH 150
200 PRINT "===================================================="
300 PRINT "OPEN WEATHER MAP IOT APP WITH JITTER"
400 DELAY% = 4
500 PRINT "SEND WEATHER DATA TO IOT CENTRAL EVERY";DELAY%;"SECONDS"
600 PRINT "TEMPERATURE JITTERED RANDOMLY FOR ANOMALY DETECTION"

700 REM GET RANDOM NUMBER SEED FROM PLATFORM
800 PORT = 44 : GOSUB 5800 : RANDOMIZE VAL(RSTRING$)
900 RJITKEY% = RND * 100: I = 0
1000 RCOUNT% = 0

1100 WHILE 1
1200 PRINT "===================================================="
1300 PRINT "Reading:";RCOUNT%;" Jitter:";RJITKEY%
1400 IF RCOUNT% MOD 101 = RJITKEY% THEN RJITVAL% = (RND * 200) - 100 : RCOUNT% = 0 : RJITKEY% = RND * 100 ELSE RJITVAL% = 0 : RCOUNT% = RCOUNT% + 1

1500 REM GET UTC TIME AS STRING
1600 PORT = 42 : GOSUB 5800
1700 PRINT "Time (UTC): ";RSTRING$

1710 REM GET LOCAL TIME AS STRING
1720 PORT = 43 : GOSUB 5800
1730 PRINT "Time (local): ";RSTRING$

1800 REM GET TEMPERATURE AS A STRING
1900 PORT = 45 : GOSUB 5800 : TEMPERATURE$ = STR$(VAL(RSTRING$) + RJITVAL%)
2200 PRINT "Temperature: ";TEMPERATURE$;" celsius"

2300 REM GET PRESSURE AS A STRING
2400 PORT = 46 : GOSUB 5800 : PRESSURE$ = RSTRING$
2600 PRINT "Pressure: ";PRESSURE$;" millibars"

2700 REM GET HUMIDITY AS A STRING
2800 PORT = 47 : GOSUB 5800 : HUMIDITY$ = RSTRING$
3000 PRINT "Humidity: ";HUMIDITY$;"%"

3100 REM GET WEATHER OBSERVATION AS A STRING
3200 PORT = 48 : GOSUB 5800
3300 PRINT "Weather: ";RSTRING$

1460 REM GET AIR QUALITY INDEX AS A STRING
1465 PORT = 60 : GOSUB 5800 : AIRQUALITYINDEX$ = RSTRING$
1470 PRINT "Air Quality Index (CAQI): ";RSTRING$

3400 REM GET LATITUDE AS A STRING
3500 PORT = 49 : GOSUB 5800 : LATITUDE$ = RSTRING$
3700 PRINT "Latitude: ";LATITUDE$

3800 REM GET LONGITUDE A STRING
3900 PORT = 50 : GOSUB 5800 : LONGITUDE$ = RSTRING$
4100 PRINT "Longitude: ";LONGITUDE$

4200 PRINT "BASIC free memory:"; FRE(0)
4300 REM GENERATE JSON THEN PUBLISH
4400 GOSUB 4900 : GOSUB 7000

4500 PRINT "Pause";DELAY%;"seconds."
4600 GOSUB 6400

4700 WEND
4800 END

4900 REM SUBROUTINE BUILD JSON STRING
5000 RJSON$ = "{"
5100 RJSON$ = RJSON$ + CHR$(34) + "temperature" + CHR$(34) + ":" + TEMPERATURE$ + ","
5200 RJSON$ = RJSON$ + CHR$(34) + "pressure" + CHR$(34) + ":" +  PRESSURE$ + ","
5300 RJSON$ = RJSON$ + CHR$(34) + "humidity" + CHR$(34) + ":" +  HUMIDITY$ + ","
5400 RJSON$ = RJSON$ + CHR$(34) + "latitude" + CHR$(34) + ":" +  LATITUDE$ + ","
5500 RJSON$ = RJSON$ + CHR$(34) + "longitude" + CHR$(34) + ":" +  LONGITUDE$ + ","
5560 RJSON$ = RJSON$ + CHR$(34) + "aqi" + CHR$(34) + ":" +  AIRQUALITYINDEX$
5600 RJSON$ = RJSON$ + "}"
5700 RETURN

5800 REM SUBROUTINE READS STRING DATA FROM PORT UNTIL NULL CHARACTER
5810 OUT PORT, 0
5900 RSTRING$ = ""
6000 C=INP(200)
6100 IF C = 0 THEN RETURN
6200 RSTRING$ = RSTRING$ + CHR$(C)
6300 GOTO 6000

6400 REM THIS DELAYS PROGRAM EXECUTION BY DELAY% SECONDS
6500 REM YOU COULD 'WAIT 30, 1, 1' BUT IT IS A BLOCKING STATEMENT
6600 OUT 30, DELAY%
6700 IF INP(30) = 1 THEN GOTO 6700
6900 RETURN

7000 REM SUBROUTINE PUBLISHES JSON TO AZURE IOT
7100 LENGTH% = LEN(RJSON$)
7200 IF LENGTH% = 0 THEN RETURN
7300 IF LENGTH% > 256 THEN RETURN
7400 PRINT "PUBLISHING JSON TO AZURE IOT"
7500 PRINT RJSON$
7600 FOR DATAINDEX% = 1 TO LENGTH%
7700 OUT 31, ASC(MID$(RJSON$, DATAINDEX%, 1))
7800 NEXT DATAINDEX%
7900 OUT 31, 0
7910 REM WAIT FOR PUBLISH JSON PENDING TO GO FALSE
7920 WAIT 31, 1, 1
8000 RETURN

