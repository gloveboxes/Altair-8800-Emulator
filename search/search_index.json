{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The goal of the cloud-connected Altair project is to provide a unique blend of computing history with modern cloud computing. You'll learn about computing fundamentals, software development, and modern IoT, Data, and AI cloud services that address today's real-world IT challenges.</p> <p>The Altair 8800 kick-started the personal computer revolution. Microsoft's first product was Altair BASIC written for the Altair 8800 by Bill Gates and Paul Allen. At the time, Altair BASIC was a huge step forward as it allowed people to write programs using a high-level programming language.</p> <p></p> <p>The Altair project provides a fun way to learn:</p> <ol> <li>Vibe code Altair 8800 applications using Intel 8080 Assembly, BDS C, and Microsoft BASIC, with help from Large Language Models (LLMs) such as Claude Sonnet or OpenAI Codex, in VS Code with GitHub Copilot.</li> <li>Learn to build multithreaded, event-driven IoT C applications that scale from microcontrollers and Raspberry Pis to desktop-class computers.</li> <li>Safely explore machine-level programming, including Intel 8080 Assembly, C, and BASIC development.</li> <li>Enjoy retro gaming and play classic games from the past.</li> <li>Optionally, integrate free weather and pollution cloud services from Open Weather Map and ThingsBoard for telemetry and control.</li> <li>Optionally, stream telemetry data to the <code>ThingsBoard</code> MQTT Broker or a standalone Mosquitto MQTT Broker.</li> </ol>"},{"location":"#retro-computing-with-dave-glover-and-the-altair-8800","title":"Retro computing with Dave Glover and the Altair 8800","text":""},{"location":"#supported-operating-systems","title":"Supported operating systems","text":"<p>The fastest and easiest way to run the Altair emulator is on your computer with Docker on Linux, macOS, Windows, ChromeOS, and Raspberry Pi OS. You'll be up and running in minutes.</p> <p>The Altair emulator can also be compiled to run on POSIX compatible operating systems including, Linux, ChromeOS, Windows with WSL 2, macOS on Apple Silicon and Intel.</p>"},{"location":"#supported-devices","title":"Supported devices","text":"<p>The more interesting way to run the Altair emulator is on a device, the Altair emulator has been tested on the following devices:</p> <ol> <li>Raspberry Pi models Zero, 2, 2B, Zero 2, 3B, 3B, 4, 5 capable of running 32-bit or 64-bit (preferred) Raspberry Pi OS.</li> <li>Azure Sphere Avnet and Seeed Developer Kits running embedded Linux.</li> </ol>"},{"location":"#raspberry-pi-with-the-optional-pi-sense-hat","title":"Raspberry Pi with the optional Pi Sense HAT","text":"<p>If you pair a Raspberry Pi with a Pi Sense HAT, the Altair address and data bus activity is displayed on the 8x8 LED panel.</p> Raspberry Pi with Pi Sense HAT Raspberry Pi Sense HAT"},{"location":"#altair-history","title":"Altair history","text":"<p>Altair 8800 image attribution - Smithsonian Museum</p> <p>The Altair 8800 was built on the Intel 8080 CPU, the second 8-bit microprocessor manufactured by Intel in 1974. By today's standards, it's a simple CPU design, perfect for learning computing fundamentals because of its small instruction set.</p> <p>The original Altair 8800 was programmed by setting switches on the front panel. It was a painstaking, error-prone process to load and run a program. The Altair 8800 had a series of LEDs and switches that you used to load apps and determine the state of the Altair.</p> <p>You could save and load applications from a paper tape reader connected to the Altair 8800. As the Altair 8800 grew in popularity, more options became available. You could attach a keyboard, a computer monitor, and finally disk drives, a more reliable way to save and load applications.</p>"},{"location":"navigating-the-docs/","title":"Navigating the Docs","text":"<p>Take a moment to familiarize yourself with the docs document layout:</p>"},{"location":"navigating-the-docs/#page-navigation-elements","title":"Page Navigation Elements","text":"<ul> <li>The main navigation menu on the left side contains links to all sections of the documentation.</li> <li>The top bar provides search, theme toggle, and language options.</li> <li>The top-right includes a link to the project GitHub repository.</li> <li>The bottom shows Next/Previous page links.</li> </ul>"},{"location":"navigating-the-docs/#expanding-an-image","title":"Expanding an Image","text":"<p>Click any image to open a larger view in a new tab.</p> <p></p>"},{"location":"navigating-the-docs/#star-the-repo","title":"Star the repo","text":"<p>Star the GitHub repository so you can easily find it later.</p> <ol> <li>Visit the repository: Altair 8800 Emulator</li> <li>Log into your GitHub account.</li> <li>Click the Star button in the top right corner.</li> </ol> <p>To revisit the workshop later, click your profile picture on GitHub and select Your stars.</p>"},{"location":"20-fundamentals/05-Introduction/","title":"Introduction","text":"<p>There are three components to the Altair 8800 emulator solution.</p> <ol> <li>The Altair Web Terminal</li> <li>The Altair emulator</li> <li>Cloud services</li> </ol> <p></p>"},{"location":"20-fundamentals/10-deployment-options/","title":"Deployment Options","text":"<p>There are three ways to deploy the Altair 8800 emulator.</p> <ol> <li>Deploy with Docker</li> <li>Build from source</li> <li>Deploy on Azure Sphere</li> </ol>"},{"location":"20-fundamentals/10-deployment-options/#deploying-the-altair-8800-with-docker","title":"Deploying the Altair 8800 with Docker","text":"<p>The fastest and easiest way to get started with the Altair emulator is on a system running Docker.</p> <p>For more information, refer to Deploy with Docker.</p>"},{"location":"20-fundamentals/10-deployment-options/#build-from-source","title":"Build from source","text":"<p>You can also build the Altair emulator from the source code and run it as a native application on your computer. For more information, refer to Compiling the Altair emulator.</p> <p>Reasons to do this include:</p> <ol> <li>You want to make changes to the Altair emulator code.</li> <li>You want to run the Altair emulator on a device that does not support Docker.</li> <li>You'd want to learn how to build the Altair emulator from the source code.</li> <li>You have an Apple Silicon Mac and want to run the Altair emulator natively on one of the Apple Silicon efficiency cores.</li> </ol> <p>Building the Altair 8800 emulator from source has been tested and is supported on the following POSIX compatible operating systems.</p> <ul> <li>Windows 11 with WSL 2</li> <li>Ubuntu 20.04 and 22.04</li> <li>macOS,</li> <li>Raspberry Pi OS 64-bit (preferred) and 32-bit</li> </ul>"},{"location":"20-fundamentals/10-deployment-options/#azure-sphere","title":"Azure Sphere","text":"<p>If you have an Azure Sphere device, you can run the Altair 8800 emulator on it. The Altair emulator runs as a native application on the Azure Sphere device. The Altair emulator is a POSIX compatible application and runs on the Azure Sphere OS.</p> <p>Follow the Deploy on Azure Sphere instructions.</p>"},{"location":"20-fundamentals/23-Altair-emulator/","title":"The Emulator","text":"<p>The Altair 8800 emulator is a software program that emulates the Altair 8800 computer. The Altair emulator is written in C and runs on most desktop operating systems as well as devices like the Raspberry Pi, Beaglebone, and Azure Sphere.</p> <p>This is version 5 of the Altair 8800 emulator project and it shares a similar code base as the Azure Sphere Cloud-Enabled Altair 8800 as featured on the Register \"Microsoft adds cloud enablement to 1970s Altair 8800 tech\".</p>"},{"location":"20-fundamentals/23-Altair-emulator/#source-code","title":"Source code","text":"<ul> <li>The Altair emulator source code is maintained in the Altair 8800 Emulator GitHub repo.</li> <li>The soltion is Open Source and is provided under an MIT License, and contributions are very welcome.</li> </ul>"},{"location":"20-fundamentals/23-Altair-emulator/#architecture","title":"Architecture","text":"<p>The Altair emulator runs on POSIX compatible operating systems including, Linux, Windows with WSL 2, macOS on Apple Silicon and Intel, as well as devices like Raspberry Pi, Beaglebone, and Azure Sphere.</p> <p></p> <p>Starting from the bottom left and moving up and then to the right.</p> <ul> <li>POSIX Compatible OS:. The Altair 8800 emulator runs on POSIX compatible operating systems, including Linux, macOS, Windows WSL 2, and Raspberry Pi OS.</li> <li>WebSocket &amp; MQTT C: These communication libraries connect the Altair emulator to the web terminal and cloud services. The Altair terminal IO messages are routed over WebSockets, and the IoT data over MQTT.</li> <li>Event library: The Altair coordinates activities on the main thread using the event event loop library.</li> <li>EdgeDevX: This library simplifies access to Azure IoT services, provides event-timer services, along with several useful utilities.</li> <li>Terminal IO &amp; Cloud Services: The Intel 8080 CPU provides 256 input ports and 256 output ports. The Intel 8080 ports were used to integrate peripherals such as disk drives, printers, and modems. However, for the Altair emulator, these ports are used to integrate communications and cloud services. Terminal input and output ports are routed over WebSockets, other ports are used for timing services, access to weather and pollution data, plus Azure IoT services.</li> <li>Intel 8080 emulator: This is an open-source software implementation of the Intel 8080 CPU. The Intel 8080 emulator executes Intel 8080 applications including the CP/M operating system, compilers, apps, and games.</li> <li>CPU Monitor: The CPU monitor implements the virtual Altair front panel, along with memory disassembler, tracer, and Altair emulator reset.</li> <li>CP/M: CP/M originally stood for Control Program/Monitor. Later, CP/M became known as Control Program for Microcomputers. It was a mass-market operating system created in 1974 for Intel 8080/85-based microcomputers by Gary Kildall of Digital Research, Inc.</li> <li>Programming languages: Included on the main disk image are the Microsoft BASIC interpreter, the BDS C compiler, and the Intel and Microsoft assemblers and linkers.</li> <li>Altair BASIC: By default the Altair emulator boots CP/M, but it is easy to boot the original Altair BASIC program.</li> <li>Altair Web Terminal: Provides a web-browser hosted Altair terminal. The web terminal is built using the Xterm library. Xterm.js provides a web browser-hosted terminal, a WebSocket integrates Xterm with the Altair emulator.</li> <li>Open Weather Map: Open Weather Map provides planet-scale weather and pollution data services. Open Weather Map provides free access to weather and pollution data by geographic location.</li> <li>ThingsBoard: ThingsBoard is an open-source IoT platform for data collection, processing, visualization, and device management. ThingsBoard supports industry-standard IoT protocols: MQTT, CoAP, and HTTP. The Altair emulator uses the MQTT protocol to connect to ThingsBoard.</li> </ul>"},{"location":"20-fundamentals/23-Altair-emulator/#raspberry-pi-with-a-pi-sense-hat","title":"Raspberry Pi with a Pi Sense HAT","text":"<p>There is specific support for the Altair emulator running on a Raspberry Pi with a Pi Sense HAT. The Altair emulator has been tested on the following Raspberry Pi Raspberry Pi models Zero, 2, 2B, Zero 2, 3B, 3B, 4, 5 capable of running 32-bit or 64-bit (preferred) Raspberry Pi OS.</p> <p>The Raspberry Pi paired with a Pi Sense HAT displays the Altair address and data bus activity on the 8x8 LED panel.</p> Raspberry Pi with Pi Sense HAT Raspberry Pi Sense HAT"},{"location":"20-fundamentals/25-Web-Terminal/","title":"Start the Web Terminal","text":"<p>The Altair web terminal is a remote terminal command prompt for the Altair emulator. The web terminal is a static web app and is hosted in your web browser and connects to the Altair emulator. When the web terminal connects, the Altair terminal reports the emulator and CP/M versions, and you can start to use the Altair.</p> <p>Note, there are links on the web terminal to the retro games GitHub repo, the documentation, and user and programming manuals.</p> <p></p>"},{"location":"20-fundamentals/25-Web-Terminal/#ten-minute-video-introduction","title":"Ten-minute video introduction","text":""},{"location":"20-fundamentals/30-introduction-cpm/","title":"Learn about CP/M","text":"<p>CP/M originally stood for Control Program/Monitor. Later, CP/M became known as Control Program for Microcomputers. It was a mass-market operating system created in 1974 for Intel 8080/85-based microcomputers by Gary Kildall of Digital Research, Inc.</p> <p>The first version was single-tasking on 8-bit processors with support for up to 64 kilobytes of memory. Later versions of CP/M added multiple-user variations and were migrated to 16-bit processors.</p> <p>For more information about CP/M, see the CP/M Wikipedia article and CP/M Frequently Asked Questions.</p>"},{"location":"20-fundamentals/30-introduction-cpm/#digital-research-cpm-operating-system-manual","title":"Digital Research CP/M Operating System Manual","text":"<p>You will find a wealth of information about CP/M, including compilers, assemblers, debuggers, and more in the Digital Research CP/M Operating System Manual</p>"},{"location":"20-fundamentals/30-introduction-cpm/#programming-the-altair-emulator","title":"Programming the Altair emulator","text":"<p>From CP/M, you can program the Altair emulator using Microsoft BASIC, BD Software C, the Intel Assembler and Linker, and the Microsoft MACRO-80 Assembler.</p>"},{"location":"20-fundamentals/30-introduction-cpm/#get-started-with-cpm","title":"Get started with CP/M","text":"<p>Here are some CP/M commands to get you started:</p> <ul> <li> <p>Changing drives. The Altair emulator mounts two drives, drive A and drive B. To change drives, from the Altair CP/M command prompt in the Web Terminal, type the drive name, then press the Enter key.</p> <pre><code>a:\n\nb:\n</code></pre> </li> <li> <p>Display a directory listing.</p> <pre><code>dir\n\ndir *.BAS\n\nls\n</code></pre> </li> <li> <p>Erase a file.</p> <pre><code>era *.txt\n</code></pre> </li> <li> <p>Copy Microsoft BASIC <code>mbasic.com</code> from drive A to drive B.</p> <pre><code>a:pip b:mbasic.com.com=a:mbasic.com\n</code></pre> </li> <li> <p>List the contents of a file.</p> <pre><code>type hw.c\n</code></pre> </li> <li> <p>Rename a file.</p> <pre><code>ren hello.c=hw.c\n</code></pre> </li> </ul>"},{"location":"20-fundamentals/30-introduction-cpm/#get-started-with-retro-gaming","title":"Get started with retro gaming","text":""},{"location":"20-fundamentals/30-introduction-cpm/#download-a-retro-game","title":"Download a retro game","text":"<p>The <code>gf</code> (Get File) utility provides easy access to a built-in games repository. You can download classic retro games directly without needing to set up your own web server or navigate through GitHub repositories.</p>"},{"location":"20-fundamentals/30-introduction-cpm/#using-the-built-in-games-repository","title":"Using the Built-in Games Repository","text":"<p>The simplest way to download retro games is using the <code>-g</code> option:</p> <ol> <li> <p>From the Altair web terminal CP/M command prompt, use the Get File command with the game option:</p> <pre><code>gf -g love.bas\n</code></pre> </li> <li> <p>The game file will be downloaded directly to your CP/M filesystem.</p> </li> <li> <p>Start the game from the CP/M command line:</p> <pre><code>mbasic love\n</code></pre> </li> </ol>"},{"location":"20-fundamentals/30-introduction-cpm/#common-games-available","title":"Common Games Available","text":"<p>Here are some popular games you can download:</p> <pre><code>gf -g love.bas          # The classic Love game\ngf -g menu.bas          # Menu system for games\ngf -g adventure.bas     # Text adventure game\ngf -g lunar.bas         # Lunar Lander simulation\n</code></pre>"},{"location":"20-fundamentals/30-introduction-cpm/#alternative-manual-repository-access","title":"Alternative: Manual Repository Access","text":"<p>You can also browse and download games manually from the Retro Games repository if you prefer to see what's available before downloading.</p> <p>Important Note: Many retro games expect to find <code>MENU.BAS</code> in the CP/M filesystem. Be sure to download it as well:</p> <pre><code>gf -g menu.bas\n</code></pre>"},{"location":"20-fundamentals/30-introduction-cpm/#retro-game-acknowledgments","title":"Retro game acknowledgments","text":"<p>This list of games was made possible by the dedicated work of CP/M Games and Vintage BASIC.</p>"},{"location":"20-fundamentals/40-Rebooting-the-Altair/","title":"Rebooting the Emulator","text":"<p>There are various reasons why you might want to reboot the Altair operating system.</p> <ol> <li>You may crash the Altair operating system if you hack the current CPU instruction pointer or corrupt RAM. You might corrupt memory while programming in Assembly or with the virtual front panel.</li> <li>You might have tried to access a drive letter that is not available. The only way to recover is to reboot the Altair.</li> <li>You want to boot Altair BASIC and run the original Altair BASIC written by Bill Gates and Paul Allan.</li> </ol> <p>You'll be glad to know it's easy to reboot the Altair.</p>"},{"location":"20-fundamentals/40-Rebooting-the-Altair/#reboot-cpm","title":"Reboot CP/M","text":"<ol> <li>From the web terminal, select Ctrl+M to enter the CPU monitor.</li> <li>Type r (for Altair RESET), followed by Enter to boot CP/M.</li> </ol>"},{"location":"20-fundamentals/40-Rebooting-the-Altair/#reboot-altair-basic","title":"Reboot Altair BASIC","text":"<p>By default, the Altair emulator loads CP/M on startup. To load Altair BASIC, follow these instructions.</p> <ol> <li>From the web terminal, select Ctrl+M to enter the CPU monitor.</li> <li>Type basic (for Altair BASIC), followed by Enter to boot Altair BASIC.</li> <li> <p>You'll be prompted for the following information:</p> <ul> <li>MEMORY SIZE?: Select the Enter key to accept the default.</li> <li>TERMINAL  WIDTH?: Select Enter to accept the default.</li> <li>WANT SIN-COS-TAN-ATN?: Enter <code>Y</code> or <code>N</code>.</li> </ul> <p>Altair BASIC responds with the amount of memory and version information.</p> </li> </ol> <p>For more information about Altair BASIC, refer to Altair-BASIC-programming</p>"},{"location":"20-fundamentals/50-Cloud-services/01-Add-cloud-services/","title":"Introduction","text":"<p>Adding cloud services to the Altair 8800 emulator is optional, but it does provide some interesting features such as internet weather and pollution data, and the ability to report Altair 8800 telemetry to an MQTT broker.</p> <p>You can use the following cloud services with the Altair emulator.</p> <ul> <li>Open Weather Map provides planet-scale weather and pollution data services. Open Weather Map provides free access to weather and pollution data.</li> </ul>"},{"location":"20-fundamentals/50-Cloud-services/01-Add-cloud-services/#cloud-service-access-keys","title":"Cloud service access keys","text":"<p>The following pages will show you how to create resources and keys for each service. You'll need to save configuration settings. Copy and paste these settings to a scratch file using a text editor such as Notepad or TextEdit.</p>"},{"location":"20-fundamentals/50-Cloud-services/02-Open-Weather-Map/","title":"Open Weather Map","text":"<p>Connecting the Open Weather Map cloud service is optional, free, and recommended so the Altair emulator can stream weather and pollution information over MQTT.</p>"},{"location":"20-fundamentals/50-Cloud-services/02-Open-Weather-Map/#create-an-open-weather-map-api-key","title":"Create an Open Weather Map API Key","text":"<ol> <li>From your web browser navigate to https://openweathermap.org/api</li> <li>Sign in to Open Weather Map</li> <li>Select API from the Open Weather Map main menu.</li> <li>Subscribe to the Current Weather Data. Select the Free option, and select Get API key.</li> <li>Repeat and subscribe to the Air Pollution API. Select the Free option, and select Get API key.</li> <li>Select API Keys from the Open Weather Map site.</li> <li>Copy the Open Weather Map API key somewhere safe as you will need this data when you start the Altair in cloud-connected mode.</li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/02-Open-Weather-Map/#open-weather-map-air-quality-calculation","title":"Open Weather Map air quality calculation","text":"<p>Open Weather Map air quality calculation is based on the Common Air Quality Index (CAQI). The Common Air Quality Index (CAQI) is an air quality index used in Europe since 2006.</p> <p></p> <p>For more information, refer to the calculation of Air Quality index.</p>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/01-About-IoT-Central/","title":"About Azure IoT Central","text":"<p>Connecting Azure IoT Central is optional and free to try. IoT Central will be very useful as you can stream and report weather, pollution, and diagnostics data, as well as export data for anomaly detection.</p> <p>In this exercise, you will create an Azure IoT Central application. Later you will learn about Altair applications that stream data to Azure IoT Central. Applications that stream data to Azure IoT Central include WEATHER.BAS and JSON.BAS.</p>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/01-About-IoT-Central/#azure-iot-central","title":"Azure IoT Central","text":"<p>Azure IoT Central is a cloud-based Internet of Things (IoT) application platform. It provides an easy way to connect, monitor, and manage your IoT assets at scale. Azure IoT Central builds on Azure IoT Hub, Device Provisioning Service, Stream Analytics, and Time Series Insights.</p> <p></p> <p>Azure IoT Central follows the eight attributes of successful IoT solutions.</p>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/02-IoT-Plug-and-Play/","title":"IoT Plug and Play","text":"<p>This solution uses IoT Plug and Play with IoT Central. IoT Plug and Play (PnP) defines a model that a device uses to advertise its capabilities to a PnP-enabled application like IoT Central. PnP is an open specification, to learn more, refer to What is IoT Plug and Play.</p> <p>An IoT Plug and Play CO2 monitor model has been published to the public repository of IoT Plug and Play models. A local copy of the IoT Plug and Play model is located in the iot_plug_and_play directory.</p> <p>When your device first connects to IoT Central, the IoT Plug and Play model is retrieved from the public repository of models. IoT Central then creates default views using the Plug and Play model.</p> <p>The IoT Plug and Play model for the CO2 monitor project is declared in main.h.</p> <pre><code>#define IOT_PLUG_AND_PLAY_MODEL_ID \"dtmi:com:example:azuresphere:co2monitor;2\"\n</code></pre>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/04-Create-an-IoT-Central-app/","title":"Create an IoT Central app","text":"<ol> <li> <p>Open the IoT Central web portal by selecting this link Azure IoT Central.</p> </li> <li> <p>Select Build a solution.</p> </li> <li> <p>log in with your Microsoft personal, work, or school account. If you don't have a Microsoft account, then you can create one for free by using the Create one! link.</p> </li> <li> <p>Expand the sidebar menu by selecting the Menu icon.</p> <p></p> </li> <li> <p>Navigate to Build, select Custom app, then select Create app.</p> <p></p> </li> <li> <p>Specify the Application name and URL.</p> </li> <li> <p>Select the Free pricing plan. You can migrate to a standard plan with two free devices after seven days.</p> </li> <li> <p>Select Create.</p> </li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/06-Create-an-IoT-Central-device-key/","title":"Create a device key","text":"<p>To securely connect the Altair emulator to Azure IoT Central you need to create a device ID and a derived device key.</p>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/06-Create-an-IoT-Central-device-key/#install-the-azure-cli-tools","title":"Install the Azure CLI tools","text":"<p>Follow the How to install the Azure CLI guide to install the Azure CLI on your computer.</p>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/06-Create-an-IoT-Central-device-key/#create-an-iot-central-enrollment-group","title":"Create an IoT Central enrollment group","text":"<p>From the Azure IoT Central web portal, follow these steps.</p> <ol> <li>Select Permissions from the sidebar menu.</li> <li>Select Device connection groups.</li> <li>Select +New to create a new enrollment group.</li> <li>Name your group altair-emulator.</li> <li>Select Shared access signature attestation type.</li> <li>Select Save</li> <li>While on this page, copy the ID scope of your Azure IoT Central application somewhere safe. You will need the ID scope* when you start the Altair emulator.</li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/06-Create-an-IoT-Central-device-key/#create-the-device-key","title":"Create the device key","text":"<ol> <li> <p>Open a Terminal window on your computer and run the compute-device-key command to generate a device-derived key. Notes.</p> <ul> <li>You will likely be prompted to install the azure-iot extension. Select Y, and press Enter.</li> <li>The primary key is the primary key generated by your newly created IoT Central enrollment group.</li> <li>The device id is any arbitrary/sensible name, for example, myAltair.</li> </ul> <pre><code>az iot central device compute-device-key --pk {primaryKey} --device-id {deviceid}\n</code></pre> </li> <li> <p>Copy the Device ID, and the Derived key somewhere safe as you will need these values  when you start the Altair emulator in cloud-connected mode.</p> </li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/","title":"Customize IoT Central","text":"<p>In this exercise, you will be customizing Azure IoT Central to display the data sent from the applications you run on the Altair emulator. Applications that stream data to Azure IoT Central include WEATHER.BAS and JSON.BAS.</p>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#open-the-azure-iot-central-device-explorer","title":"Open the Azure IoT Central device explorer","text":"<ol> <li> <p>Go to Azure IoT Central.</p> </li> <li> <p>On the left pane, select Devices select your device.</p> <p>It might take a minute or two for the Altair emulator device to register in the devices section of Azure IoT Central.</p> </li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#customize-the-climate-monitor-template","title":"Customize the Climate monitor template","text":"<p>The Altair emulator supports IoT Plug and Play. When the Altair emulator connects to Azure IoT Central, the Climate Monitor Plug and Play model is loaded from the public repository of models. Default views are created for the Climate Monitor model. These default views are a great starting point, but they need customization along with some new views.</p> <p>The IoT Plug and Play model is declared in the main.h file.</p> <pre><code>#define IOT_PLUG_AND_PLAY_MODEL_ID \"dtmi:com:example:climatemonitor;2\"\n</code></pre>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#add-a-summary-properties-view","title":"Add a summary properties view","text":"<ol> <li> <p>On the left pane, select Views, and then select the Editing device and cloud data tile.</p> <p></p> </li> <li> <p>Name the form Summary.</p> </li> <li>Select 3 column layout.</li> <li> <p>Expand Properties.</p> <p></p> </li> <li> <p>Select the following properties:</p> <ul> <li>Humidity</li> <li>Pressure</li> <li>Temperature</li> <li>Weather</li> </ul> </li> <li>Select Add section.</li> <li>Drag the newly added section in column 3 to column 1</li> <li>Select the following properties:<ul> <li>Heartbeat</li> <li>Software version</li> <li>Start time</li> </ul> </li> <li>Select Add section.</li> <li>Select the following properties:<ul> <li>City</li> <li>Country</li> <li>Location</li> </ul> </li> <li> <p>Select Add section.</p> <p>Your summary page layout should look like the following image.</p> <p></p> </li> <li> <p>Select Save.</p> </li> <li>Select Back.</li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#add-a-weather-data-visualization-view","title":"Add a weather data visualization view","text":"<ol> <li> <p>On the left pane, select Views, and then select the Visualizing the device tile.</p> <p></p> </li> <li> <p>Name the view Weather.</p> </li> <li>Select Line chart from the Start with a visual list, then select Add tile.</li> <li>Select the Size available icon on the tile and select 3x3.</li> <li>Select the Edit icon on the tile.</li> <li>Name the chart Weather.</li> <li>Select Past 12 hours from the Display range dropdown list.</li> <li>Select Capability.</li> <li>In the capability list, select temperature.</li> <li>Select Capability.</li> <li>In the capability list, select pressure.</li> <li>Select Capability.</li> <li>In the capability list, select humidity.</li> <li>Select Capability.</li> <li> <p>In the capability list, select Wind speed.</p> </li> <li> <p>Select Update.</p> </li> <li>Select Save.</li> <li>Select Back.</li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#add-a-pollution-data-visualization-view","title":"Add a pollution data visualization view","text":"<ol> <li> <p>On the left pane, select Views, and then select the Visualizing the device tile.</p> <p></p> </li> <li> <p>Name the view pollution.</p> </li> <li>Select Line chart from the Start with a visual list, then select Add tile.</li> <li>Select the Size available icon on the tile, and select 4x4.</li> <li>Select the Edit icon on the tile.</li> <li>Name the chart Pollution.</li> <li>Select Past 12 hours from the Display range dropdown list.</li> <li>Select Capability.</li> <li>In the capability list, select aqi.</li> <li>Repeat adding capabilities, and add the following capabilities.<ol> <li>co (carbon monoxide)</li> <li>nh3 (ammonia)</li> <li>no (nitrous oxide)</li> <li>no2 (nitrous dioxide)</li> <li>o3 (ozone)</li> <li>pm10 (particulate matter 10)</li> <li>pm2_5 (particulate matter 2.5)</li> <li>so2 (sulphur dioxide)</li> <li>Wind speed</li> </ol> </li> </ol> <p>Notes. Pollutants produced by vehicle exhausts include carbon monoxide, hydrocarbons, nitrogen oxides, particles, volatile organic compounds, and sulfur dioxide. Hydrocarbons and nitrogen oxides react with sunlight and warm temperatures to form ground-level ozone. Ground-level ozone, a key ingredient in smog, can cause upper respiratory problems and lung damage.</p> <ol> <li>Select Update.</li> <li>Select Save.</li> <li>Select Back.</li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#customize-the-led-brightness-property","title":"Customize the LED brightness property","text":"<p>If you have a Raspberry Pi with a Pi Sense HAT then customize the LED Brightness property. You can use this property to set the brightness of the Pi Sense HAT 8x8 LED panel.</p> <ol> <li>On the left pane, select Device templates</li> <li>On the left pane, select Customize, and then expand the LED brightness property.</li> </ol> <p>Update the property by using the information from the following table</p> <p></p> <pre><code>| Display&amp;nbsp;name | Initial&amp;nbsp;value | Min.&amp;nbsp;value | Max.&amp;nbsp;value | True&amp;nbsp;name | False&amp;nbsp;name |\n| --- |--- | --- |--- | --- |--- |\n| LED brightness | 2 | 0 | 15 | n/a | n/a |\n</code></pre> <ol> <li>Select Save.</li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#publish-the-template","title":"Publish the template","text":"<p>To publish the template to the Azure IoT Central application, select the Publish button.</p> <p></p>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#view-your-altair-emulator-device","title":"View your Altair emulator device","text":"<ol> <li> <p>On the left pane, select Devices, select the Climate monitor template and then select your device.</p> </li> <li> <p>To explore the device views, select the various tabs.</p> <p></p> </li> </ol>"},{"location":"20-fundamentals/50-Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#explore-climate-data-from-iot-central","title":"Explore climate data from IoT Central","text":"<p>You can explore and analyze data from Azure IoT Central. </p> <ol> <li>On the left pane, select Data explorer.</li> <li>Select the + New Query.</li> <li>Select the Climate monitor Device group.</li> <li>Select the temperature Telemetry.</li> <li>Select Group by Device ID.</li> <li>Select Analyze.</li> <li>Select the data time frame you would like to explore.</li> <li>Select data time frame you would like to zoom into.</li> </ol> <p></p>"},{"location":"40-deploy-with-docker/10-introduction/","title":"Introduction","text":"<p>The simplest way to run the Altair 8800 emulator is with Docker. First, install Docker on your system. Supported platforms and architectures include:</p> <ul> <li>Linux</li> <li>macOS</li> <li>Windows</li> <li>ChromeOS (with developer mode enabled)</li> <li>Raspberry Pi</li> <li>BeagleBone</li> </ul> <p>Supported CPU architectures:</p> <ul> <li>64-bit: arm64, amd64</li> <li>32-bit: arm/v6, arm/v7</li> </ul> <p>To deploy the Altair emulator with Docker, you need to follow these steps.</p> <ol> <li>Install prerequisites</li> <li>Start the Altair emulator Docker container</li> <li>Configure cloud services (optional)</li> </ol>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/","title":"Build Docker Images","text":""},{"location":"40-deploy-with-docker/100-Create-Docker-images/#building-multi-architecture-docker-images-for-altair-everywhere","title":"Building Multi-Architecture Docker Images for Altair Everywhere","text":"<p>This guide shows how to build Docker images that work on both x64 (AMD64) and ARM64 architectures using Docker Buildx.</p>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker Desktop installed with Buildx support</li> <li>Docker Hub account (or another container registry)</li> <li>Access to the Altair Everywhere repository</li> </ul>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"40-deploy-with-docker/100-Create-Docker-images/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>If you haven't already, clone the Altair Everywhere repository:</p> <pre><code>git clone https://github.com/gloveboxes/Altair-8800-Emulator\n</code></pre>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/#2-navigate-to-the-docker-directory","title":"2. Navigate to the Docker Directory","text":"<pre><code>cd Altair-8800-Emulator/Docker\n</code></pre>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/#3-create-and-configure-multi-architecture-builder","title":"3. Create and Configure Multi-Architecture Builder","text":"<p>Create a new buildx builder instance that supports multi-platform builds:</p> <pre><code>docker buildx create --name multiarch --use\n</code></pre> <p>Bootstrap the builder to ensure it's ready:</p> <pre><code>docker buildx inspect --bootstrap\n</code></pre> <p>\u26a0\ufe0f Warning: This will remove all build cache and may slow down subsequent builds.</p>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/#4-login-to-docker-registry","title":"4. Login to Docker Registry","text":"<p>Make sure you're authenticated with your container registry:</p> <pre><code>docker login\n</code></pre>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/#5-build-multi-architecture-image","title":"5. Build Multi-Architecture Image","text":"<p>Replace <code>YOUR_DOCKER_ID</code> with your actual Docker Hub username:</p> <pre><code>docker buildx build . --platform linux/arm64,linux/arm/v7,linux/arm/v6,linux/amd64 --tag YOUR_DOCKER_ID/altair8800:latest --push --no-cache\n</code></pre> <p>This command will:</p> <ul> <li>Build for both ARM64, ARMv7, ARMv6, and AMD64 architectures</li> <li>Tag the image as <code>latest</code></li> <li>Push directly to Docker Hub</li> </ul>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/#6-switch-to-default-builder","title":"6. Switch to Default Builder","text":"<pre><code>docker context use default\n</code></pre>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/#option-2-remove-custom-builder","title":"Option 2: Remove Custom Builder","text":"<pre><code>docker buildx rm multiarch\n</code></pre> <p>This automatically switches back to the default builder.</p>"},{"location":"40-deploy-with-docker/100-Create-Docker-images/#verify-current-builder","title":"Verify Current Builder","text":"<p>Check which builder is currently active:</p> <pre><code>docker buildx ls\n</code></pre> <p>The active builder is marked with an asterisk (*).</p>"},{"location":"40-deploy-with-docker/15-install-prerequisites/","title":"Install Prerequisites","text":"<p>Install Docker on your computer.</p> <ul> <li>Install Docker Desktop on Windows</li> <li> <p>Install Docker Desktop on Mac</p> </li> <li> <p>Install Docker on Linux and Raspberry Pi</p> <p>Docker has a script to install Docker on Debian, Ubuntu, and Raspberry Pi OS. Run this script using the following command.</p> <pre><code> curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh\n</code></pre> <p>Docker installation notes</p> <p>On arm/v6 (Raspberry Pi Zero and BeagleBone), install Docker using:</p> <pre><code>sudo apt update\nsudo apt install -y docker.io\nsudo usermod -aG docker $USER\n</code></pre> <p>Review the Manage Docker as a non-root user document.</p> <ol> <li> <p>Grant the current user Docker rights</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> </li> <li> <p>Reboot the system.</p> </li> </ol> </li> </ul>"},{"location":"40-deploy-with-docker/17-start-container/","title":"Deploying the Altair 8800 Emulator with Docker","text":"<p>This guide explains how to start and configure the Altair 8800 emulator using Docker. The Altair emulator is a software recreation of the classic Altair 8800 computer, supporting CP/M and other retro environments. You can run it on Linux, macOS, Windows, and Raspberry Pi.</p> <p>Below you'll find instructions for standard and advanced deployment modes, environment variable configuration, persistent disk storage, and useful Docker commands.</p>"},{"location":"40-deploy-with-docker/17-start-container/#altair-8800-standard-mode","title":"Altair 8800 Standard Mode","text":"<p>This option is recommended for most users and works on 64-bit versions of Linux, macOS, Windows, and Raspberry Pi.</p> <pre><code>docker run -d --user root -p 8082:8082 -p 80:80 --name altair8800 --rm glovebox/altair8800:latest\n</code></pre> <p>Note: Port 80 provides access to the Web Terminal interface, while port 8082 enables Altair emulator terminal I/O through a WebSocket connection.</p>"},{"location":"40-deploy-with-docker/17-start-container/#altair-8800-advanced-modes","title":"Altair 8800 Advanced Modes","text":"<p>You can enable advanced features by setting environment variables. These options can be combined as needed:</p> <ul> <li>Set the time zone.</li> <li>Connect to an MQTT broker to publish Altair address and data bus information.</li> <li>Connect to the Open Weather Map service for current weather data.</li> <li>Run on a Raspberry Pi with a Pi Sense HAT to display address and data bus info on the 8x8 LED panel.</li> </ul>"},{"location":"40-deploy-with-docker/17-start-container/#docker-environment-variables","title":"Docker Environment Variables","text":"<p>The Altair emulator supports several Docker environment variables. The easiest way to set these is with the env file <code>--env-file</code> option. You'll find a sample <code>altair.env</code> file in the root folder of this project. Create a copy of this file, modify it as needed and save it somewhere convenient and safe especially if it contains sensitive information like API keys.</p> <p>Open the <code>altair.env</code> file in a text editor and set the environment variables you want to use. Then, start the Altair emulator Docker container with the <code>--env-file</code> option.</p>"},{"location":"40-deploy-with-docker/17-start-container/#supported-environment-variables","title":"Supported Environment Variables","text":"Variable Description TZ Set the time zone (e.g., Australia/Sydney) MQTT_HOST MQTT broker host MQTT_PORT MQTT broker port (default: 1883) MQTT_CLIENT_ID Unique MQTT client ID OPEN_WEATHER_MAP_API_KEY API key for Open Weather Map FRONT_PANEL Front panel type (sensehat, kit, none; default: none) <pre><code>docker run -d --env-file altair.env --user root -p 8082:8082 -p 80:80 --name altair8800 --rm glovebox/altair8800:latest\n</code></pre>"},{"location":"40-deploy-with-docker/17-start-container/#time-zone","title":"Time Zone","text":"<p>Set the time zone with the <code>TZ=YOUR_TIME_ZONE</code> environment variable. For example, to set the time zone to Sydney, Australia, use <code>TZ=Australia/Sydney</code>. See the list of time zones for your location.</p>"},{"location":"40-deploy-with-docker/17-start-container/#mqtt-broker","title":"MQTT Broker","text":"<p>Connect to an MQTT broker to publish Altair address and data bus information. Set the following environment variables:</p> <ul> <li>MQTT_HOST=<code>YOUR_MQTT_HOST</code></li> <li>MQTT_PORT=<code>YOUR_MQTT_PORT</code> (default: 1883)</li> <li>MQTT_CLIENT_ID=<code>YOUR_MQTT_CLIENT_ID</code> (must be unique for each client)</li> </ul>"},{"location":"40-deploy-with-docker/17-start-container/#thingsboard","title":"ThingsBoard","text":"<p>Telemetry data is sent to the MQTT topic <code>v1/devices/me/telemetry</code> in ThingsBoard format. You can install the free ThingsBoard Community Edition locally, including on devices like a Raspberry Pi. See the ThingsBoard installation guide. In ThingsBoard, create an MQTT device to represent your Altair emulator. Use the same <code>MQTT_CLIENT_ID</code> when connecting from the Altair emulator.</p>"},{"location":"40-deploy-with-docker/17-start-container/#open-weather-map","title":"Open Weather Map","text":"<p>Connect to the Open Weather Map service for current weather information. Set:</p> <ul> <li>OPEN_WEATHER_MAP_API_KEY=<code>YOUR_OPEN_WEATHER_MAP_API_KEY</code> (get a free API key at Open Weather Map)</li> </ul>"},{"location":"40-deploy-with-docker/17-start-container/#raspberry-pi-with-pi-sense-hat","title":"Raspberry Pi with Pi Sense HAT","text":"<p>You can run the Altair emulator on a Raspberry Pi with a Pi Sense HAT attached. The Pi Sense HAT 8x8 LED panel displays the Altair address and data bus information. For games, you can switch between Font and bitmap display modes.</p> Raspberry Pi with Pi Sense HAT Raspberry Pi Sense HAT"},{"location":"40-deploy-with-docker/17-start-container/#enable-the-pi-sense-hat","title":"Enable the Pi Sense HAT","text":"<p>Set the front panel environment variable:</p> <ul> <li>FRONT_PANEL=<code>sensehat</code> (Options: sensehat, kit, none; default: none)</li> </ul>"},{"location":"40-deploy-with-docker/17-start-container/#enable-i2c-hardware-access","title":"Enable I2C Hardware Access","text":"<p>Enable I2C hardware access and pass the <code>--device</code> option to the <code>docker run</code> command:</p> <ol> <li> <p>Enable I2C hardware access on the Raspberry Pi:</p> <pre><code>sudo raspi-config nonint do_i2c 0\n</code></pre> </li> <li> <p>Pass the <code>--device</code> option to the <code>docker run</code> command:</p> <pre><code>docker run -d --device=/dev/i2c-1 --env-file altair.env --user root -p 8082:8082 -p 80:80 --name altair8800 --rm glovebox/altair8800-pisense:latest\n</code></pre> </li> </ol>"},{"location":"40-deploy-with-docker/17-start-container/#altair-disk-storage","title":"Altair Disk Storage","text":"<p>Altair emulator disks can be stored in a Docker persistent storage volume. This ensures any changes made to the contents of the Altair disks are saved if the Docker container is stopped or deleted.</p> <pre><code>docker run -d -v altair-disks:/app/Disks --user root -p 8082:8082 -p 80:80 --name altair8800 --rm glovebox/altair8800:latest\n</code></pre> <p>Or, pass environment variables using the environment file:</p> <pre><code>docker run -d -v altair-disks:/app/Disks --env-file altair.env --user root -p 8082:8082 -p 80:80 --name altair8800 --rm glovebox/altair8800:latest\n</code></pre>"},{"location":"40-deploy-with-docker/17-start-container/#open-the-web-terminal","title":"Open the Web Terminal","text":"<p>To access the Altair emulator, open the Web Terminal:</p> <ol> <li>Familiarize yourself with the Web Terminal and the CP/M operating system.</li> <li> <p>Open your web browser:</p> <ul> <li>Navigate to <code>http://localhost</code> if you deployed the Altair emulator on your local computer.</li> <li>Navigate to <code>http://hostname_or_ip_address:8082</code> if you deployed the Altair emulator on a remote computer.</li> </ul> <p></p> </li> </ol>"},{"location":"40-deploy-with-docker/17-start-container/#connecting-to-a-remote-altair-emulator","title":"Connecting to a Remote Altair Emulator","text":"<p>To connect your local Web Terminal to a remote Altair emulator, add the <code>altair</code> query parameter to the URL. For example, if the remote Altair emulator is running at <code>192.168.1.100</code>, open your browser and go to <code>http://localhost?altair=192.168.1.100</code>. This requires the Web Terminal to be running on your local machine, either in a separate Docker container or installed locally.</p>"},{"location":"40-deploy-with-docker/17-start-container/#docker-tips-and-tricks","title":"Docker Tips and Tricks","text":""},{"location":"40-deploy-with-docker/17-start-container/#manage-the-altair-emulator-docker-container","title":"Manage the Altair Emulator Docker Container","text":"<p>Stop the container:</p> <pre><code>docker stop altair8800\n</code></pre> <p>Restart the container:</p> <pre><code>docker start altair8800\n</code></pre> <p>Delete the container: First, stop the container, then remove it:</p> <pre><code>docker container rm altair8800\n</code></pre>"},{"location":"40-deploy-with-docker/17-start-container/#manage-persistent-storage-volume","title":"Manage Persistent Storage Volume","text":"<p>Inspect the volume:</p> <pre><code>docker volume inspect altair-disks\n</code></pre> <p>Check data in the volume:</p> <pre><code>sudo ls /var/lib/docker/volumes/altair-disks/_data -all\n</code></pre> <p>Remove the volume:</p> <pre><code>docker volume rm altair-disks\n</code></pre>"},{"location":"45-build-from-source/01-Introduction/","title":"Introduction","text":"<p>The following list outlines the steps you'll need to complete. Be sure to follow the steps for your computer operating system.</p> <ol> <li>Install Visual Studio Code.</li> <li>Install the required libraries.</li> <li>Clone the Altair emulator repository.</li> <li>Build the Altair emulator project.</li> </ol>"},{"location":"45-build-from-source/02-Clone-Altair-repo/","title":"Clone the Altair repo","text":"<p>For Windows users, you must clone the project into the WSL2 filesystem. Not the Windows filesystem.</p> <p>Run the following commands to clone the Altair8800 emulator repo to your computer.</p> <ol> <li> <p>Clone the repo</p> <pre><code>git clone --recurse-submodules https://github.com/gloveboxes/Altair-8800-Emulator\n</code></pre> </li> </ol>"},{"location":"45-build-from-source/03-Build-from-vs-code/","title":"Build from Visual Studio Code","text":""},{"location":"45-build-from-source/03-Build-from-vs-code/#install-visual-studio-code","title":"Install Visual Studio Code","text":"<ol> <li> <p>Install Visual Studio Code.</p> </li> <li> <p>Open a Terminal command prompt.     If you are using Windows Subsystem for Linux then open a WSL command prompt.</p> </li> <li>Go to the Altair-8800-Emulator/src folder</li> <li> <p>Run the following command to open the folder with VS Code.</p> <pre><code>code .\n</code></pre> </li> <li> <p>Install the following Visual Studio Code extensions:</p> <ul> <li>If using WSL, then install the Visual Studio Code Remote-WSL extension.</li> <li>Visual Studio Code CodeLLDB extension</li> <li>CMake Tools extension</li> <li>C/C++ extension</li> </ul> </li> <li> <p>Open the .vscode/launch.json file in VS Code.</p> </li> <li> <p>Optionally update the [args] json property for the build configuration. Available options are:</p> <ul> <li><code>--MqttHost &lt;host&gt;</code>: MQTT broker hostname (required for MQTT)</li> <li><code>--MqttPort &lt;port&gt;</code>: MQTT broker port (default: 1883)</li> <li><code>--MqttClientId &lt;client_id&gt;</code>: MQTT client ID (default: AltairEmulator_) <li><code>--MqttUsername &lt;username&gt;</code>: MQTT username (default: none)</li> <li><code>--MqttPassword &lt;password&gt;</code>: MQTT password (default: none)</li> <li><code>--NetworkInterface &lt;iface&gt;</code>: Network interface to use</li> <li><code>--FrontPanel &lt;mode&gt;</code>: Front panel selection: sensehat, kit, none (default: none)</li> <li><code>--OpenWeatherMapKey &lt;key&gt;</code>: OpenWeatherMap API key</li> <li><code>--OpenAIKey &lt;key&gt;</code>: OpenAI API key</li> <p>Example: Connecting to a ThingsBoard MQTT broker</p> <p>To connect to a ThingsBoard MQTT broker, set the <code>args</code> property in your <code>.vscode/launch.json</code> like this:</p> <pre><code>\"args\": [\n    \"--MqttHost\", \"my-thingsboard-host\",\n    \"--MqttClientId\", \"vscode\",\n]\n</code></pre> <li> <p>Save the launch.json file.</p> </li> <li>Select the GCC or Clang Kit.</li> <li>Press F5 to compile and launch the Altair emulator.</li>"},{"location":"45-build-from-source/04-Compile-from-CLI/","title":"Build from the Command Line","text":"<p>Test that you can build the Altair 8800 project.</p> <ol> <li>From a terminal window, go to the Altair-8800-Emulator/src folder that you cloned to your computer.</li> <li> <p>Run the following commands to compile the Altair project:</p> <pre><code>mkdir -p build &amp;&amp; cd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\ncmake --build . --target all -j\"$(nproc)\"\n</code></pre> </li> <li> <p>Check the build completion message to confirm a successful build. The build completion message will be similar to <code>[100%] Built target serializer</code>. If the build process fails, check that you installed all the required packages.</p> </li> </ol>"},{"location":"45-build-from-source/05-Run-the-emulator/","title":"Start the Emulator","text":"<ol> <li>From a terminal window, change to the Altair-8800-Emulator/src folder that you cloned to your computer.</li> <li> <p>You can run the Altair emulator in standalone mode.</p> <pre><code>./build/Altair_emulator\n</code></pre> </li> </ol>"},{"location":"45-build-from-source/05-Run-the-emulator/#command-line-arguments","title":"Command Line Arguments","text":"<p>The Altair emulator accepts the following command line arguments:</p> <ul> <li><code>-m</code>, <code>--MqttHost &lt;host&gt;</code>: MQTT broker hostname (required for MQTT)</li> <li><code>-p</code>, <code>--MqttPort &lt;port&gt;</code>: MQTT broker port (default: 1883)</li> <li><code>-c</code>, <code>--MqttClientId &lt;client_id&gt;</code>: MQTT client ID (default: <code>AltairEmulator_&lt;timestamp&gt;</code>)</li> <li><code>-U</code>, <code>--MqttUsername &lt;username&gt;</code>: MQTT username (default: none)</li> <li><code>-P</code>, <code>--MqttPassword &lt;password&gt;</code>: MQTT password (default: none)</li> <li><code>-n</code>, <code>--NetworkInterface &lt;iface&gt;</code>: Network interface to use</li> <li><code>-f</code>, <code>--FrontPanel &lt;mode&gt;</code>: Front panel selection: sensehat, kit, none (default: none)</li> <li><code>-o</code>, <code>--OpenWeatherMapKey &lt;key&gt;</code>: OpenWeatherMap API key</li> <li><code>-a</code>, <code>--OpenAIKey &lt;key&gt;</code>: OpenAI API key</li> <li><code>-h</code>, <code>--help</code>: Show help message</li> </ul>"},{"location":"45-build-from-source/05-Run-the-emulator/#example-usage","title":"Example usage","text":"<p>Run the emulator with MQTT and weather integration:</p> <pre><code>./build/Altair_emulator --MqttHost mqtt_host --MqttPort 1883 --MqttClientId MyAltair --OpenWeatherMapKey &lt;your_api_key&gt; --NetworkInterface wlan0 --FrontPanel sensehat\n</code></pre>"},{"location":"45-build-from-source/05-Run-the-emulator/#example-usage-short-argument-names","title":"Example usage (short argument names)","text":"<p>Run the emulator with MQTT and weather integration using short argument names:</p> <pre><code>./build/Altair_emulator -m mqtt_host -p 1883 -c MyAltair -o &lt;your_api_key&gt; -n wlan0 -f sensehat\n</code></pre>"},{"location":"45-build-from-source/06-Start-the-web-terminal/","title":"06 Start the web terminal","text":"<p>You can run the Altair emulator on your local computer or with a cloud service like Azure Static website hosting in Azure Storage. </p> <p>The following instructions are for running the Altair emulator on your local computer.</p> <ol> <li> <p>Ensure Python 3 is installed on your computer. </p> <pre><code>python3 --version\n</code></pre> <p>If Python 3 is not installed, refer to the Python 3 installation instructions. 2. Open a terminal window and navigate to the <code>Terminal</code> folder of the Altair emulator project you cloned from GitHub.</p> <p><pre><code>cd Terminal\n</code></pre> 3. Start the Python web server.</p> <p><pre><code>python3 -m http.server 80\n</code></pre> 4. Open a web browser and navigate to the following URL. This assumes the Altair emulator is running on the same computer as the web browser.</p> <pre><code>http://localhost\n</code></pre> </li> <li> <p>If the Altair emulator is running on a different computer then add the hostname or the IP address of the computer running the Altair emulator to the  <code>altair</code> parameter of the <code>localhost</code> URL.</p> <pre><code>http://localhost?altair=HOSTNAME_OR_IP_ADDRESS\n</code></pre> </li> </ol>"},{"location":"45-build-from-source/Install%20prerequisites/01-Linux-users/","title":"Linux","text":"<p>Follow these steps to install the required packages.</p> <ol> <li>Open a Terminal window.</li> <li> <p>Run the following command to install the required packages</p> <pre><code>sudo apt-get install -y libuv1-dev cmake build-essential gdb curl libcurl4-openssl-dev libssl-dev uuid-dev ca-certificates git libi2c-dev libgpiod-dev gpiod\n</code></pre> </li> </ol>"},{"location":"45-build-from-source/Install%20prerequisites/02-macOS-users/","title":"macOS","text":"<ol> <li> <p>Install Xcode command line tools</p> <pre><code>xcode-select --install\n</code></pre> </li> <li> <p>Install Homebrew</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run the following command to install the required packages.</p> <pre><code>brew install libuv openssl ossp-uuid cmake\n</code></pre> </li> </ol>"},{"location":"45-build-from-source/Install%20prerequisites/03-Windows-users/","title":"Windows","text":"<p>Complete the following steps:</p> <ol> <li>If you have not done so already, then install Windows Subsystem for Linux (WSL2) and Ubuntu 20.04.</li> <li>Optional, but recommended, install the Windows Terminal</li> </ol>"},{"location":"45-build-from-source/Install%20prerequisites/03-Windows-users/#install-the-required-packages","title":"Install the required packages","text":"<p>The Altair project requires the following packages:</p> <ol> <li>libuv1 event loop library.</li> <li>SSL Development.</li> <li>OSSP uuid</li> <li>C compiler and debugging tools.</li> </ol>"},{"location":"45-build-from-source/Install%20prerequisites/03-Windows-users/#windows-subsystem-for-linux-users","title":"Windows Subsystem for Linux users","text":"<p>Follow these steps to install the required packages.</p> <ol> <li>Open an WSL Ubuntu Terminal window.</li> <li> <p>Run the following command to install the required packages</p> <pre><code>sudo apt-get install -y libuv1-dev cmake build-essential gdb curl libcurl4-openssl-dev libssl-dev uuid-dev ca-certificates git libi2c-dev libgpiod-dev gpiod\n</code></pre> </li> </ol>"},{"location":"45-build-from-source/Install%20prerequisites/04-Raspberry-Pi-users/","title":"Raspberry Pi OS","text":""},{"location":"45-build-from-source/Install%20prerequisites/04-Raspberry-Pi-users/#install-raspberry-pi-os","title":"Install Raspberry Pi OS","text":"<p>The easiest way to install Raspberry Pi OS is to use the latest version of the Raspberry Pi Imager.</p> <p>Warning</p> <ul> <li>You must use Raspberry Pi OS Debian 13 <code>Trixie</code> or later to build and run the Altair emulator as the emulator source expects libgpiod v2.0 or later.</li> <li>As of October 2025, the latest version of Raspberry Pi OS is Debian 13 <code>Trixie</code>.</li> </ul> <ol> <li>Check which version of Raspberry Pi OS your Raspberry Pi is compatible with.</li> <li>If compatible, then install Raspberry Pi OS 64 bit no desktop to maximize memory for the Altair emulator build process.</li> <li>Learn how to use the Raspberry Pi Imager.</li> <li>Select the Raspberry Pi Imager Settings icon to configure the operating system installation, wifi settings and more.</li> </ol>"},{"location":"45-build-from-source/Install%20prerequisites/04-Raspberry-Pi-users/#connect-to-your-raspberry-pi","title":"Connect to your Raspberry Pi","text":"<ol> <li>From your desktop computer, start an SSH session to your Raspberry Pi.</li> <li> <p>From the SSH session, run the following command to install the required packages</p> <pre><code>sudo apt-get install -y libuv1-dev cmake build-essential gdb curl libcurl4-openssl-dev libssl-dev uuid-dev ca-certificates git libi2c-dev libgpiod-dev gpiod\n</code></pre> </li> </ol>"},{"location":"45-build-from-source/Install%20prerequisites/04-Raspberry-Pi-users/#raspberry-pi-sense-hat-support","title":"Raspberry Pi Sense HAT support","text":"<p>If you are building the Altair project on a Raspberry Pi with a Raspberry Pi PI Sense HAT then you need to enable the I2C bus.</p> <p>From the command prompt, run the following command to enable I2C support for the Pi Sense HAT.</p> <pre><code>sudo raspi-config nonint do_i2c 0\n</code></pre>"},{"location":"50-azsphere/01-Introduction/","title":"Introduction","text":"<p>This is version 5 of the Azure Sphere Altair Emulator and shares the same code base as the Altair 8800 docker project that runs on Windows, Linux, macOS, and Raspberry Pi.</p>"},{"location":"50-azsphere/01-Introduction/#source-code","title":"Source code","text":"<ul> <li>The Altair on Azure Sphere source code is maintained at AI and Cloud powered Altair 8800</li> <li>The Altair Front Panel hardware design.</li> <li>All the source is provided under an MIT License, and contributions are very welcome.</li> </ul>"},{"location":"50-azsphere/01-Introduction/#azure-sphere","title":"Azure Sphere","text":"<p>Azure Sphere is a secure embedded platform that is ideal for quickly developing an IoT system. By providing a platform meeting all 7 properties of highly secured devices, Azure Sphere eliminates the need to be a hardware, OS, and security expert. These seven properties make Azure Sphere ideal for running Intelligent Edge solutions.</p> <p>Azure Sphere consists of the following components: </p> <p></p> <ul> <li>Azure Sphere\u2013certified chips from hardware partners include built-in Microsoft security technology to provide connectivity and a dependable hardware root of trust.</li> <li>Azure Sphere OS adds layers of protection and ongoing security updates to create a trustworthy platform for new IoT experiences.</li> <li>Azure Sphere Security Service brokers trust for device-to-cloud communication, detects threats and renews device security.</li> </ul>"},{"location":"50-azsphere/01-Introduction/#altair-on-azure-sphere","title":"Altair on Azure Sphere","text":"<p>The Altair emulator is supported on Azure Sphere devices from Avnet and Seeed Studio. If an Azure Sphere device is paired with the Altair front panel kit or the Mikroe Altair Retro Click, the Altair address and data bus activity are displayed.</p>"},{"location":"50-azsphere/01-Introduction/#ideal-azure-sphere-config","title":"Ideal Azure Sphere config","text":"<p>The ideal Azure Sphere configuration is the Avnet Azure Sphere Starter Kit paired with the MikroE microSD Click and the MikroE 8800 Retro Click.</p> Azure Sphere with the Altair front panel kit MikroE Retro Click"},{"location":"50-azsphere/03-architecture/","title":"Architecture","text":"<p>The Altair solution is deployed across all three custom app cores on Azure Sphere, including two workloads on the low-power real-time cores. The Altair emulator runs on the high-level Cortex A7 core, a continuous movement classification TinyML model runs on one of the real-time cores, and the other real-time core runs storage services.</p> <p></p> <p>Starting from the bottom left and moving up and then to the right.</p> <ul> <li>WebSocket &amp; Azure IoT C: These communication libraries connect the Altair emulator to the web terminal and cloud services. The Altair terminal IO messages are routed over WebSockets, and the Azure IoT C SDK connects the Altair to Azure IoT Central.</li> <li>Event loop: The Altair coordinates activities on the main thread using the built-in Event loop library.</li> <li>AzureSphereDevX: This library simplifies access to Azure IoT services, and provides event-timer services, along with several useful utilities.</li> <li>Terminal IO &amp; Cloud Services: The Intel 8080 CPU provides 256 input ports and 256 output ports. The Intel 8080 ports were used to integrate peripherals such as disk drives, printers, and modems. However, for the Altair emulator, these ports are used to integrate communications and cloud services. Terminal input and output ports are routed over WebSockets, other ports are used for timing services, access to weather and pollution data, plus Azure IoT services.</li> <li>Intel 8080 emulator: This is an open-source software implementation of the Intel 8080 CPU. The Intel 8080 emulator executes Intel 8080 applications including the CP/M operating system, compilers, apps, and games.</li> <li>CPU Monitor: The CPU monitor implements the virtual Altair front panel, along with memory disassembler, tracer, and Altair emulator reset.</li> <li>CP/M: CP/M originally stood for Control Program/Monitor. Later, CP/M became known as Control Program for Microcomputers. It was a mass-market operating system created in 1974 for Intel 8080/85-based microcomputers by Gary Kildall of Digital Research, Inc.</li> <li>Programming languages: Included on the main disk image are the Microsoft BASIC interpreter, the BDS C compiler, and the Intel and Microsoft assemblers and linkers.</li> <li>Altair BASIC: By default the Altair emulator boots CP/M, but it is easy to boot the original Altair BASIC program.</li> <li>Altair Web Terminal: Provides a web-browser-hosted Altair terminal. The web terminal is built using the Xterm library. Xterm.js provides a web browser-hosted terminal, a WebSocket integrates Xterm with the Altair emulator.</li> <li>Open Weather Map: Open Weather Map provides planet-scale weather and pollution data services. Open Weather Map provides free access to weather and pollution data by geographic location.</li> <li>ThingsBoard: ThingsBoard is an open-source IoT platform for data collection, processing, visualization, and device management. ThingsBoard supports industry-standard IoT protocols: MQTT, CoAP, and HTTP. The Altair emulator uses the MQTT protocol to connect to ThingsBoard.</li> </ul>"},{"location":"50-azsphere/40-Manage-disk-images/","title":"Manage Disk Images","text":""},{"location":"50-azsphere/40-Manage-disk-images/#backup-an-altair-boot-sd-card","title":"Backup an Altair boot SD card","text":"<p>You've been creating apps from the Altair emulator and saving them to the CP/M filesystem. Now you want to backup the contents of the SD card and recreate Altair disk images from the backup.</p> <p>To create a backup, you extract the Altair SD card contents to a binary file. Then you separate the backup file into individual Altair disk images.</p> <p>The process is:</p> <ol> <li>Remove the SD card from the Azure Sphere device and plug it into your computer.</li> <li>Open a command prompt and navigate to the Altair_sd_card_image_tools folder.</li> <li>Power off the Azure Sphere device.</li> <li> <p>Extract the SD card contents to a binary file.</p> <ul> <li> <p>On Linux and macOS, run the DD command.</p> <pre><code>sudo dd if=/dev/sda of=altair_extracted_sd_card_image.bin bs=512 count=12000; sync\n</code></pre> </li> <li> <p>On Windows, download and run dd.</p> <p>List the Windows disks.</p> <pre><code>dd --list\n</code></pre> <p>The following command assumes the SD card is mounted as the D: drive. Adjust the drive letter to be used based on your Windows disk configuration.</p> <pre><code>dd if=\\\\.\\d: of=altair_extracted_sd_card_image.bin bs=512 count=12000\n</code></pre> </li> </ul> <p>This will read the SD card into a file named altair_extracted_sd_card_image.bin.</p> </li> </ol>"},{"location":"50-azsphere/40-Manage-disk-images/#extract-altair-disk-images-from-a-backup","title":"Extract Altair disk images from a backup","text":"<ol> <li> <p>Run the following command to extract Altair disk images from a SD card backup image.</p> <pre><code>python3 extract_disks_from_sd_card_image.py\n</code></pre> <p>Using the default settings, the extract_disks_from_sd_card_image.py script will create four Altair disk images.</p> <pre><code>- azsphere_cpm63k.dsk\n- bdsc-v1.60.dsk\n- escape.dsk\n- blank.dsk\n</code></pre> </li> </ol>"},{"location":"50-azsphere/40-Manage-disk-images/#create-an-altair-boot-disk-image-from-disk-images","title":"Create an Altair boot disk image from disk images","text":"<p>Altair disk images can be used to create an Altair boot image to be flashed to an SD card.</p> <p>To create an SD card binary image from Altair disk images, run the following command:</p> <pre><code>create_sd_card_image_from_disks.py\n</code></pre> <p>By default, the create_sd_card_image_from_disks.py Python script will create a binary disk image file named altair_burn_disk_image.bin from the following disk images:</p> <pre><code>- azsphere_cpm63k.dsk\n- bdsc-v1.60.dsk\n- escape.dsk\n- blank.dsk\n</code></pre>"},{"location":"50-azsphere/01-Deploy-the-Altair/01-Deployment-options/","title":"Deployment Options","text":"<p>The easiest way to deploy the Altair emulator the Azure Sphere is to use prebuilt images. To integrate cloud services then you will need to install the Azure Sphere developer tools and create the cloud services you want to use.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/01-Deployment-options/#ideal-azure-sphere-config","title":"Ideal Azure Sphere config","text":"<p>The ideal Azure Sphere configuration is the Avnet Azure Sphere Starter Kit paired with the MikroE microSD Click and the MikroE 8800 Retro Click.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/01-Deployment-options/#supported-configurations","title":"Supported configurations","text":"<p>There are two storage options.</p> Option Pros Cons Azure Sphere real-time difference disk service. No extra hardware required. Disk changes are lost if the device is reset or power is cycled. MikroE microSD Click. Requires an Avnet Azure Sphere Start Kit Rev 1 or 2. Permanent storage on SD card. Additional hardware required. <p>There are three display options.</p> Option Pros Cons No display. No extra hardware required. No visual indication of the state of the Altair. MikroE 8800 Retro Click. Display the state of the Altair, display characters and bitmaps. Additional hardware required. The Altair Front Panel Kit. Authentic Altair 8800 experience. Requires skills and equipment to make the front panel kit. Can't be used with the MikroE 8800 Retro Click."},{"location":"50-azsphere/01-Deploy-the-Altair/02-Clone-Altair-repo/","title":"Clone the Altair repo","text":"<ol> <li>Install the git client.</li> <li>From a command line navigate to your regular project folder.</li> <li> <p>From the command line, clone the Altair emulator repo from GitHub. The Altair project will be cloned into a folder named AltairOnAzureSphere.</p> <pre><code>git clone --recurse-submodules https://github.com/AzureSphereCloudEnabledAltair8800/AltairOnAzureSphere.git AltairOnAzureSphere\n</code></pre> </li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/03-Deploy-prebuilt/","title":"Deploy Pre-built Images","text":"<p>Install the following real-time core app services for the Altair Emulator.</p> <ol> <li>The movement classification service.</li> <li>The storage service.</li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/03-Deploy-prebuilt/#deploy-the-movement-classification-service","title":"Deploy the movement classification service","text":"<ol> <li>Open a command prompt and navigate to the Altair_imagepackages folder.</li> <li> <p>From the command prompt, run the following command to deploy the movement classification service.</p> <pre><code>azsphere device sideload deploy -p AltairRT_movement_classify.imagepackage\n</code></pre> </li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/03-Deploy-prebuilt/#deploy-the-sd-card-service","title":"Deploy the SD card service","text":"<p>If you the Mikroe SD card Click then deploy the SD card service. Ensure the MikroE SD card Click is plugged in Click Socket 1 on the Avnet Azure Sphere board. If you don't have an SD card Click then deploy the differencing disk service.</p> <p>Select the imagepackage that matches your Avnet Azure Sphere Starter Kit.</p> Device Image Package Name Avnet Rev 1 AltairRT_sd_card_service_avnet_rev_1.imagepackage Avnet Rev 2 AltairRT_sd_card_service_avnet_rev_2.imagepackage <ol> <li>Open a command prompt and navigate to the Altair_imagepackages folder.</li> <li> <p>From the command prompt, run the following command to deploy the SD Card service.</p> <pre><code>azsphere device sideload deploy -p IMAGE_PACKAGE_NAME.imagepackage\n</code></pre> </li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/03-Deploy-prebuilt/#deploy-the-differencing-disk-service","title":"Deploy the differencing disk service","text":"<p>If you don't have an SD card Click then deploy the differencing disk service. </p> <p>The differencing disk services provides approximately 100 KB of temporary read/write storage for the Altair filesystem. Any changes made to the Altair filesystem will be lost when the power to the device is cycled.</p> <ol> <li>Open a command prompt and navigate to the Altair_imagepackages folder.</li> <li> <p>From the command prompt, run the following command to deploy the differencing disk.</p> <pre><code>azsphere device sideload deploy -p AltairRT_difference_disk_service.imagepackage\n</code></pre> </li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/03-Deploy-prebuilt/#deploy-the-altair-emulator","title":"Deploy the Altair emulator","text":"<p>There are a number of prebuilt Altair emulator images. If your configuration matches one from the list then deploy that image. Failing that, you will need to compile the Altair emulator for your specific configuration.</p> <p>Select the imagepackage that matches your configuration.</p> Device Image Package Name Avnet Rev 1 with SD card and 8800 Retro Click emulator_avnet_r1_sd_retro.imagepackage Avnet Rev 2 with SD card and 8800 Retro Click emulator_avnet_r2_sd_retro.imagepackage <ol> <li>Open a command prompt and navigate to the Altair_imagepackages folder.</li> <li> <p>From the command prompt, run the following command to deploy the SD Card service.</p> <pre><code>azsphere device sideload deploy -p IMAGE_PACKAGE_NAME.imagepackage\n</code></pre> </li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/04-WiFi-configuration/","title":"Wi-Fi Configuration","text":"<p>There are two options to configure the WiFi of the device. You can configure the WiFi with an SD Card or the Azure Sphere CLI. If you use a Mikroe Retro 8800 Click, then the IP address will be displayed on the LED panel when the device successfully connects to a WiFi network.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/04-WiFi-configuration/#wifi-provisioning-with-an-sd-card","title":"WiFi provisioning with an SD card","text":"<p>If you deploy the Altair emulator with an Mikroe SD card Click then you can provision the Wi-Fi from the SD card.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/04-WiFi-configuration/#macos-users-wifi-provisioning-with-an-sd-card","title":"macOS users WiFi provisioning with an SD card","text":"<p>If you deploy the Altair emulator with an Mikroe SD card Click then you can provision the Wi-Fi from the SD card.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/04-WiFi-configuration/#windows-and-linux-users-wifi-provisioning-with-azure-sphere-cli","title":"Windows and Linux users WiFi provisioning with Azure Sphere CLI","text":"<ol> <li>Install the Azure Sphere SDK.<ul> <li>The Quickstart: Install the Azure Sphere SDK for Windows will step you through the process.</li> <li>The Quickstart: Install the Azure Sphere SDK for Linux will step you through the process.</li> </ul> </li> <li>Review the device WiFi configuration section for more information on setting up Wi-Fi with the Azure Sphere CLI.</li> <li> <p>List existing WiFi configurations</p> <pre><code>azsphere device wifi list\n</code></pre> </li> <li> <p>Forget a WiFi configuration</p> <pre><code>azsphere device wifi forget -i NETWORK_ID\n</code></pre> </li> <li> <p>Add a WiFi configuration</p> <p><pre><code>azsphere device wifi add -s YOUR_SSID -p YOUR_NETWORK_PASSWORD\n</code></pre> 1. Test the Wi-Fi has connected. From a command prompt, issue the following command.</p> <pre><code>azsphere device wifi show-status\n</code></pre> </li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/05-Create-boot-SD-card/","title":"Create a Boot SD Card","text":"<p>Follow these instructions to create an Altair boot SD card or a Wi-Fi enabled Altair boot SD card.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/05-Create-boot-SD-card/#install-the-prerequisite-software","title":"Install the prerequisite software","text":"<ol> <li>Install Balena Etcher to flash an SD card.</li> <li>Install Python 3 from the Python download web page.</li> <li>Install PyYaml</li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/05-Create-boot-SD-card/#create-an-altair-boot-sd-card","title":"Create an Altair boot SD card","text":"<ol> <li>Plug the Micro SD Card into your computer.</li> <li>Start Balena Etcher.</li> <li>Select Flash from file.</li> <li>Select the altair_burn_disk_image.bin from the Altair_sd_card_image_tools folder.     &gt; Note, when warned the partition table is missing, select Continue.</li> <li>Select the target.</li> <li>Select Flash to write the contents of the altair_burn_disk_image.bin file to the SD card.</li> <li>When the copy has completed, remove the SD card from your computer, insert into the Mikroe micro SD card Click, then power on the Azure Sphere device.</li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/05-Create-boot-SD-card/#create-a-wi-fi-enabled-altair-boot-sd-card","title":"Create a Wi-Fi enabled Altair boot SD card","text":"<p>The Azure Sphere supports the following Wi-Fi network authentication protocols.</p> <ul> <li>Open</li> <li>PSK</li> <li>EAP-TLS</li> </ul>"},{"location":"50-azsphere/01-Deploy-the-Altair/05-Create-boot-SD-card/#create-a-wi-fi-profile","title":"Create a Wi-Fi profile","text":"<ol> <li>From a command prompt, navigate to the Altair_sd_card_image_tools folder.</li> <li> <p>There are three Wi-Fi profiles in this folder. Select and edit the profile based on your Wi-Fi authentication requirements.</p> <ul> <li>wifi_open.yaml</li> <li>wifi_psk.yaml</li> <li>wifi_eap.yaml</li> </ul> </li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/05-Create-boot-SD-card/#create-a-wi-fi-enabled-altair-boot-image","title":"Create a Wi-Fi enabled Altair boot image","text":"<p>The following command adds the Wi-Fi profile to the  altair_burn_disk_image.bin boot image and generates the altair_burn_disk_image_wifi.bin boot image.</p> <ol> <li> <p>Run the altair_wifi_config.py script passing the desired Wi-Fi profile.</p> <pre><code>python3 altair_wifi_config.py -p {profile}.yaml\n</code></pre> </li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/05-Create-boot-SD-card/#flash-the-wi-fi-enabled-altair-boot-image","title":"Flash the Wi-Fi enabled Altair boot image","text":"<p>Finally, flash the Altair boot image to an SD card. When the Altair emulator boots from the SD card it will look for a Wi-Fi profile. If a Wi-Fi profile is found, the Azure Sphere Wi-Fi network is provisioned and then the Wi-Fi profile is erased from the SD card.</p> <ol> <li>Plug the Micro SD Card into your computer.</li> <li>Start Balena Etcher.</li> <li>Select Flash from file.</li> <li>Select the altair_burn_disk_image_wifi.bin from the Altair_sd_card_image_tools folder.     &gt; Note, when warned the partition table is missing, select Continue.</li> <li>Select the target.</li> <li>Select Flash to write the contents of the altair_burn_disk_image_wifi.bin file to the SD card.</li> <li>When the copy has completed, remove the SD card from your computer, insert into the Mikroe micro SD card Click, then power on the Azure Sphere device.</li> </ol>"},{"location":"50-azsphere/01-Deploy-the-Altair/06-Power-management/","title":"Power Management","text":"<p>The Altair running on Azure Sphere takes advantage of advanced power management features to reduce power consumption.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/06-Power-management/#automatic-sleep","title":"Automatic sleep","text":"<p>By default, the Altair emulator will auto sleep after 10 minutes of no terminal activity. Sleep will halt the Intel 8080 CPU emulator, disable WiFi, and place the Azure Sphere in low performance mode.</p> <p>To wake the emulator, press button B on the Azure Sphere Developer Kit.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/06-Power-management/#power-management-settings","title":"Power management settings","text":"<p>The following table describes how to use the power management settings. From the CP/M command prompt, run the <code>power</code> command.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/06-Power-management/#the-cpm-power-command","title":"The CP/M power command","text":"Command Description power d Disable power management power e Enable power management power s Force to the Altair to sleep"},{"location":"50-azsphere/01-Deploy-the-Altair/06-Power-management/#i8080-power-management-io-ports","title":"i8080 power management IO ports","text":"<p>The power management IO ports are used to control the power management settings. See the i8080 Azure Sphere specific ports for information on how to use the IO ports</p> <p>The power management IO ports can be used to control the power management settings from your custom Altair applications. The following code snippets show how to control the power management.</p> <p>These examples first disable the power management, then enable the power management, then set wake from sleep to 10 seconds, then force the Altair to sleep.</p>"},{"location":"50-azsphere/01-Deploy-the-Altair/06-Power-management/#c-code","title":"C code","text":"<pre><code>outp(66, 0x00);     // Disable power management\noutp(66, 0x01);     // Enable power management\noutp(67, 10);       // Wake from sleep after 10 seconds\noutp(66, 0x02);     // Force to the Altair to sleep\n</code></pre>"},{"location":"50-azsphere/01-Deploy-the-Altair/06-Power-management/#microsoft-basic-code","title":"Microsoft BASIC code","text":"<pre><code>10 OUT 66, 0:   REM Disable power management\n20 OUT 66, 1:   REM Enable power management\n30 OUT 67, 10:  REM Wake from sleep after 10 seconds\n40 OUT 66, 2:   REM Force to the Altair to sleep\n</code></pre>"},{"location":"50-azsphere/01-Deploy-the-Altair/06-Power-management/#assembly-code","title":"Assembly code","text":"<pre><code>ORG 0100H   ;CP/M base of TPA (transient program area)\nMVI A,0     ;Disable power management\nOUT 66      ;Call sleep port\n\nMVI A,1     ;Enable power management\nOUT 66      ;Call sleep port\n\nMVI A,10    ;Wake from sleep after 10 seconds\nOUT 67      ;Call wake from sleep port\n\nMVI A,2     ;Force sleep\nOUT 66      ;Call sleep port\n\nRET\n</code></pre>"},{"location":"50-azsphere/01-Deploy-the-Altair/07-Connect-Altair-web-terminal/","title":"Connect Altair Web Terminal","text":"<p>The Altair emulator will start running on the Azure Sphere device. </p>"},{"location":"50-azsphere/01-Deploy-the-Altair/07-Connect-Altair-web-terminal/#the-altair-emulator-web-terminal","title":"The Altair emulator web terminal","text":"<p>The Altair web terminal is a remote terminal command prompt for the Altair emulator. The web terminal is a static web app and is hosted in your web browser and connects to the Altair emulator. When the web terminal connects, the Altair terminal reports the emulator and CP/M versions, and you can start to use the Altair.</p> <p>The Altair web terminal url is http://aterminal.z8.web.core.windows.net/</p> <p>Learn more about the Altair emulator web terminal.</p>"},{"location":"50-azsphere/Cloud-services/01-Add-cloud-services/","title":"Adding Cloud Services","text":"<p>To cloud service enable the Altair emulator you must first learn how to Compile and deploy the Altair emulator</p> <p>For the best experience, use the following cloud services.</p> <ul> <li>Open Weather Map provides planet-scale weather and pollution data services. Open Weather Map provides free access to weather and pollution data.</li> <li>Azure IoT Central is a cloud-based Internet of Things (IoT) application platform. You can report, analyze and export IoT data.</li> </ul>"},{"location":"50-azsphere/Cloud-services/01-Add-cloud-services/#cloud-service-access-keys","title":"Cloud service access keys","text":"<p>The following pages will show you how to create resources and keys for each service. You'll need to save configuration settings. Copy and paste these settings to a scratch file using a text editor such as Notepad or TextEdit.</p>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/01-About-IoT-Central/","title":"01 About IoT Central","text":"<p>Connecting Azure IoT Central is optional and free to try. IoT Central will be very useful as you can stream and report weather, pollution, and diagnostics data, as well as export data for anomaly detection. </p> <p>In this exercise, you will create an Azure IoT Central application. Later you will learn about Altair applications that stream data to Azure IoT Central. Applications that stream data to Azure IoT Central include WEATHER.BAS and JSON.BAS.</p>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/01-About-IoT-Central/#azure-iot-central","title":"Azure IoT Central","text":"<p>Azure IoT Central is a cloud-based Internet of Things (IoT) application platform. It provides an easy way to connect, monitor, and manage your IoT assets at scale. Azure IoT Central builds on Azure IoT Hub, Device Provisioning Service, Stream Analytics, and Time Series Insights.</p> <p></p> <p>Azure IoT Central follows the eight attributes of successful IoT solutions.</p>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/01-About-IoT-Central/#create-an-azure-iot-central-app","title":"Create an Azure IoT Central app","text":"<p>Follow the steps below to create an Azure IoT Central application. You can refer to the Create an IoT Central application guide if you require more information.</p> <ol> <li> <p>Open the Azure IoT Central web portal.</p> </li> <li> <p>Select Build a solution.</p> </li> <li> <p>Sign in with your Microsoft personal, work, or school account. If you don't have a Microsoft account, create one for free by using the Create one! link.</p> </li> <li> <p>Expand the sidebar menu by selecting the Menu icon.</p> <p> </p> </li> <li> <p>Go to Build, select Custom app, and then select Create app.</p> </li> <li> <p>Specify the Application name and URL values.</p> </li> <li> <p>Select the pricing plan. For now, select Free. You can move to a standard plan with two free devices after seven days.</p> <p></p> </li> <li> <p>Select Create.</p> </li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/02-IoT-Plug-and-Play/","title":"02 IoT Plug and Play","text":"<p>This solution uses IoT Plug and Play with IoT Central. IoT Plug and Play (PnP) defines a model that a device uses to advertise its capabilities to a PnP-enabled application like IoT Central. PnP is an open specification, to learn more, refer to What is IoT Plug and Play.</p> <p>An IoT Plug and Play CO2 monitor model has been published to the public repository of IoT Plug and Play models. A local copy of the IoT Plug and Play model is located in the iot_plug_and_play directory.</p> <p>When your device first connects to IoT Central, the IoT Plug and Play model is retrieved from the public repository of models. IoT Central then creates default views using the Plug and Play model.</p> <p>The IoT Plug and Play model for the CO2 monitor project is declared in main.h.</p> <pre><code>#define IOT_PLUG_AND_PLAY_MODEL_ID \"dtmi:com:example:azuresphere:co2monitor;2\"\n</code></pre>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/04-Create-an-IoT-Central-app/","title":"04 Create an IoT Central app","text":"<ol> <li> <p>Open the IoT Central web portal by selecting this link Azure IoT Central.</p> </li> <li> <p>Select Build a solution.</p> </li> <li> <p>log in with your Microsoft personal, work, or school account. If you don't have a Microsoft account, then you can create one for free by using the Create one! link.</p> </li> <li> <p>Expand the sidebar menu by selecting the Menu icon.</p> <p></p> </li> <li> <p>Navigate to Build, select Custom app, then select Create app.</p> <p></p> </li> <li> <p>Specify the Application name and URL.</p> </li> <li> <p>Select the Free pricing plan. You can migrate to a standard plan with two free devices after seven days.</p> </li> <li> <p>Select Create.</p> </li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/05-Azure-Sphere-trust/","title":"05 Azure Sphere trust","text":"<p>Once your IoT Central application has been created, you must enable trust between your Azure Sphere tenant and your Azure IoT Central application. Trust is enabled by sharing your Azure Sphere tenant Certificate Authority certificate with your IoT Central application.</p> <p>When trust is enabled, any device claimed into your trusted Azure Sphere tenant will be enrolled when it first connects to IoT Central.</p> <p>Follow these steps to enable trust.</p> <ol> <li> <p>Open a command prompt.</p> </li> <li> <p>Log in to your Azure Sphere tenant. From the command prompt, run:</p> </li> </ol> <pre><code>azsphere login\n</code></pre> <ol> <li> <p>Make a note of the current folder. You'll need the name of this folder in the next step.</p> </li> <li> <p>Download the Azure Sphere tenant certificate authority (CA) certificate. From the command prompt, run:</p> </li> </ol> <pre><code>azsphere ca-certificate download --destination CAcertificate.cer\n</code></pre>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/05-Azure-Sphere-trust/#create-an-enrollment-group","title":"Create an Enrollment Group","text":"<ol> <li> <p>From the IoT Central web portal, select the hamburger button on the top-left corner of the screen to expand the sidebar menu.</p> </li> <li> <p>Select Administration, then Device Connection.</p> </li> <li> <p>Select + New.</p> </li> <li> <p>Name the enrollment group Azure Sphere.</p> </li> <li>Leave group type set to IoT devices.</li> <li>Select Certificates (X.509) from the Attestation type dropdown.</li> <li>Select Save.</li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/05-Azure-Sphere-trust/#upload-the-azure-sphere-tenant-ca-certificate-to-azure-iot-central","title":"Upload the Azure Sphere tenant CA certificate to Azure IoT Central","text":"<ol> <li> <p>Select + Manage primary.</p> </li> <li> <p>Select the folder icon next to the Primary box and navigate to the folder where you downloaded the certificate. If you don't see the .cer file in the list, set the view filter to All files (*). Select the certificate and then select the gear icon next to the Primary box.</p> </li> <li> <p>The Primary Certificate dialog box appears. The Subject and Thumbprint fields contain information about the current Azure Sphere tenant and primary root certificate.</p> </li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/05-Azure-Sphere-trust/#verify-the-tenant-ca-certificate","title":"Verify the tenant CA certificate","text":"<ol> <li>Select the Generate verification code.</li> <li> <p>Copy the verification code to the clipboard.</p> <p></p> </li> <li> <p>Download a validation certificate that proves you own the Azure Sphere tenant CA certificate. Replace &lt;code&gt; in the command with the verification code you copied to the clipboard. From a command prompt, run:</p> </li> </ol> <pre><code>azsphere ca-certificate download-proof --destination ValidationCertification.cer --verification-code &lt;code&gt;\n</code></pre> <pre><code>The Azure Sphere Security Service signs the validation certificate with the verification code to prove that you own the Certificate Authority (CA).\n</code></pre> <ol> <li> <p>Return to Azure IoT Central and select Verify.</p> </li> <li> <p>When prompted, select the validation certificate that you generated in the previous step. When the verification process is complete, the Primary Certificate dialog box displays the Verified message.</p> </li> <li> <p>Select Close to dismiss the box.</p> </li> <li> <p>Select Save.</p> <p></p> </li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/06-IoT-Central-endpoints/","title":"06 IoT Central endpoints","text":"<p>Azure Sphere applications are secure by default, including hardware and network endpoints. You must declare your IoT Central network endpoints, otherwise, your Azure Sphere application will not be able to connect to IoT Central.</p> <p>Follow these steps to list the network endpoints of your IoT Central application.</p> <ol> <li>Open the Command Prompt window.</li> <li> <p>Navigate to the azure-sphere-samples folder.</p> </li> <li> <p>For Windows: Go to the Samples\\AzureIoT\\Tools\\win-x64 folder.</p> </li> <li> <p>For Linux: Go to the Samples/AzureIoT/Tools/linux-x64 folder# Azure IoT Central. </p> <p>You might need to explicitly set execution permissions for the ShowIoTCentralConfig tool. To do so, from a terminal, run <code>chmod +x ShowIoTCentralConfig</code>.</p> </li> <li> <p>Run the ShowIoTCentralConfig tool, and then follow the prompts, as shown in the following table:</p> </li> </ol> <p>[!NOTE] Your organization might require consent for the ShowIoTCentralConfig tool to access your Azure IoT Central data in the same way that the Azure API requires such consent.</p> Prompt Response Are you using a legacy (2018) IoT Central application? (Y/N) Respond N. IoT Central App URL The URL can be found in your browser address bar (for example, https://apps.azureiotcentral.com). API token The token can be generated from your Azure IoT Central app. <ol><li>Select Administration &gt; API Tokens &gt; Generate Token.</li> <li>Provide a name for the token (for example, \"AzureSphere\").</li> <li>Select Administrator as the role, and then select Generate.</li> <li>Copy the token to the clipboard. The token starts with SharedAccessSignature. </li> </ol> ID Scope In the Azure IoT Central application, select Administration &gt; Device Connection, and then copy the ID Scope. <ol> <li>Review the output from the ShowIoTCentralConfig tool. It will look similar to the following JSON text:</li> </ol> <pre><code>\"CmdArgs\": [ \"--ScopeID\", \"0ne0099999D\" ],\n\"Capabilities\": {\n   \"AllowedConnections\": [ \"global.azure-devices-provisioning.net\", \"iotc-9999bc-3305-99ba-885e-6573fc4cf701.azure-devices.net\", \"iotc-789999fa-8306-4994-b70a-399c46501044.azure-devices.net\", \"iotc-7a099966-a8c1-4f33-b803-bf29998713787.azure-devices.net\", \"iotc-97299997-05ab-4988-8142-e299995acdb7.azure-devices.net\", \"iotc-d099995-7fec-460c-b717-e99999bf4551.azure-devices.net\", \"iotc-789999dd-3bf5-49d7-9e12-f6999991df8c.azure-devices.net\", \"iotc-29999917-7344-49e4-9344-5e0cc9999d9b.azure-devices.net\", \"iotc-99999e59-df2a-41d8-bacd-ebb9999143ab.azure-devices.net\", \"iotc-c0a9999b-d256-4aaf-aa06-e90e999902b3.azure-devices.net\", \"iotc-f9199991-ceb1-4f38-9f1c-13199992570e.azure-devices.net\" ],\n   \"DeviceAuthentication\": \"--- YOUR AZURE SPHERE TENANT ID---\",\n}\n</code></pre> <ol> <li>Copy the output from the ShowIoTCentralConfig tool to Notepad, because you'll use this information in a later unit.</li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/","title":"07 Customize Azure IoT Central","text":"<p>In this exercise, you will be customizing Azure IoT Central to display the data sent from the applications you run on the Altair emulator. Applications that stream data to Azure IoT Central include WEATHER.BAS and JSON.BAS.</p>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#open-the-azure-iot-central-device-explorer","title":"Open the Azure IoT Central device explorer","text":"<ol> <li> <p>Go to Azure IoT Central.</p> </li> <li> <p>On the left pane, select Devices select your device.</p> <p>It might take a minute or two for the Altair emulator device to register in the devices section of Azure IoT Central.</p> </li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#customize-the-climate-monitor-template","title":"Customize the Climate monitor template","text":"<p>The Altair emulator supports IoT Plug and Play. When the Altair emulator connects to Azure IoT Central, the Climate Monitor Plug and Play model is loaded from the public repository of models. Default views are created for the Climate Monitor model. These default views are a great starting point, but they need customization along with some new views.</p> <p>The IoT Plug and Play model is declared in the main.h file.</p> <pre><code>#define IOT_PLUG_AND_PLAY_MODEL_ID \"dtmi:com:example:climatemonitor;1\"\n</code></pre>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#add-a-summary-properties-view","title":"Add a summary properties view","text":"<ol> <li> <p>On the left pane, select Views, and then select the Editing device and cloud data tile.</p> <p></p> </li> <li> <p>Name the form Summary.</p> </li> <li>Select 3 column layout.</li> <li> <p>Expand Properties.</p> <p></p> </li> <li> <p>Select the following properties:</p> <ul> <li>Humidity</li> <li>Pressure</li> <li>Temperature</li> <li>Weather</li> </ul> </li> <li>Select Add section.</li> <li>Drag the newly added section in column 3 to column 1</li> <li>Select the following properties:<ul> <li>LED brightness</li> </ul> </li> <li>Select Add section.</li> <li>Drag the newly added section in column 3 to column 1 below weather properties</li> <li>Select the following properties:<ul> <li>AirQualityIndexUS</li> <li>Ammonia</li> <li>CarbonMonoxide</li> <li>NitrogenDioxide</li> <li>NitrogenMonoxide</li> <li>Ozone</li> <li>PM10</li> <li>PM2_5</li> <li>SulphurDioxide</li> <li>Wind Speed</li> </ul> </li> <li>Select Add section.</li> <li>Drag the newly added section in column 3 to column 2</li> <li>Select the following properties:<ul> <li>Heartbeat</li> <li>Software version</li> <li>Start time</li> </ul> </li> <li>Select Add section.</li> <li>Select the following properties:<ul> <li>City</li> <li>Country</li> <li>Location</li> </ul> </li> <li> <p>Select Add section.</p> <p>Your summary page layout should look like the following image.</p> <p></p> </li> <li> <p>Select Save.</p> </li> <li>Select Back.</li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#add-a-weather-data-visualization-view","title":"Add a weather data visualization view","text":"<ol> <li> <p>On the left pane, select Views, and then select the Visualizing the device tile.</p> <p></p> </li> <li> <p>Name the view Weather.</p> </li> <li>Select Line chart from the Start with a visual list, then select Add tile.</li> <li>Select the Size available icon on the tile and select 3x3.</li> <li>Select the Edit icon on the tile.</li> <li>Name the chart Weather.</li> <li>Select Past 12 hours from the Display range dropdown list.</li> <li>Select Capability.</li> <li>In the capability list, select temperature.</li> <li>Select Capability.</li> <li>In the capability list, select pressure.</li> <li>Select Capability.</li> <li>In the capability list, select humidity.</li> <li>Select Capability.</li> <li> <p>In the capability list, select Wind speed.</p> </li> <li> <p>Select Update.</p> </li> <li>Select Save.</li> <li>Select Back.</li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#add-a-pollution-data-visualization-view","title":"Add a pollution data visualization view","text":"<ol> <li> <p>On the left pane, select Views, and then select the Visualizing the device tile.</p> <p></p> </li> <li> <p>Name the view pollution.</p> </li> <li>Select Line chart from the Start with a visual list, then select Add tile.</li> <li>Select the Size available icon on the tile, and select 4x4.</li> <li>Select the Edit icon on the tile.</li> <li>Name the chart Pollution.</li> <li>Select Past 12 hours from the Display range dropdown list.</li> <li>Select Capability.</li> <li>In the capability list, select aqi.</li> <li>Repeat adding capabilities, and add the following capabilities.<ol> <li>co (carbon monoxide)</li> <li>nh3 (ammonia)</li> <li>no (nitrous oxide)</li> <li>no2 (nitrous dioxide)</li> <li>o3 (ozone)</li> <li>pm10 (particulate matter 10)</li> <li>pm2_5 (particulate matter 2.5)</li> <li>so2 (sulphur dioxide)</li> <li>Wind speed</li> </ol> </li> </ol> <p>Notes. Pollutants produced by vehicle exhausts include carbon monoxide, hydrocarbons, nitrogen oxides, particles, volatile organic compounds, and sulfur dioxide. Hydrocarbons and nitrogen oxides react with sunlight and warm temperatures to form ground-level ozone. Ground-level ozone, a key ingredient in smog, can cause upper respiratory problems and lung damage.</p> <ol> <li>Select Update.</li> <li>Select Save.</li> <li>Select Back.</li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#customize-the-led-brightness-property","title":"Customize the LED brightness property","text":"<p>If you have a Raspberry Pi with a Pi Sense HAT then customize the LED Brightness property. You can use this property to set the brightness of the Pi Sense HAT 8x8 LED panel.</p> <ol> <li>On the left pane, select Device templates</li> <li>On the left pane, select Customize, and then expand the LED brightness property.</li> </ol> <p>Update the property by using the information from the following table</p> <p></p> <pre><code>| Display&amp;nbsp;name | Initial&amp;nbsp;value | Min.&amp;nbsp;value | Max.&amp;nbsp;value | True&amp;nbsp;name | False&amp;nbsp;name |\n| --- |--- | --- |--- | --- |--- |\n| LED brightness | 2 | 0 | 15 | n/a | n/a |\n</code></pre> <ol> <li>Select Save.</li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#publish-the-template","title":"Publish the template","text":"<p>To publish the template to the Azure IoT Central application, select the Publish button.</p> <p></p>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#view-your-altair-emulator-device","title":"View your Altair emulator device","text":"<ol> <li> <p>On the left pane, select Devices, select the Climate monitor template and then select your device.</p> </li> <li> <p>To explore the device views, select the various tabs.</p> <p></p> </li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/07-Customize-Azure-IoT-Central/#explore-climate-data-from-iot-central","title":"Explore climate data from IoT Central","text":"<p>You can explore and analyze data from Azure IoT Central. </p> <ol> <li>On the left pane, select Data explorer.</li> <li>Select the + New Query.</li> <li>Select the Climate monitor Device group.</li> <li>Select the temperature Telemetry.</li> <li>Select Group by Device ID.</li> <li>Select Analyze.</li> <li>Select the data time frame you would like to explore.</li> <li>Select data time frame you would like to zoom into.</li> </ol> <p></p>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/08-Configure-network-security/","title":"08 Configure network security","text":"<ol> <li>Open the app_manifest.json file.</li> <li>Update the CmdArgs property with your IoT Central ID Scope.</li> <li> <p>Get your Azure Sphere Tenant ID. From a command prompt, run the following command.</p> <pre><code>azsphere tenant show-selected -o yaml\n</code></pre> <p>The output of this command will be similar to the following. The id property value is your Azure Sphere Tenant ID.</p> <pre><code>id: 9abc79eb-9999-43ce-9999-fa8888888894\nname: myAzureSphereTenant\nroles:\n- Administrator\n</code></pre> </li> <li> <p>Update the DeviceAuthentication property with your Azure Sphere Tenant ID.</p> </li> <li>Update the AllowedConnections property with the IoT Central Application endpoint URLs you copied to Notepad.</li> <li> <p>Review your updated manifest_app.json file. It should be similar to the following.</p> <pre><code>{\n  \"SchemaVersion\": 1,\n  \"Name\": \"co2monitor\",\n  \"ComponentId\": \"25025d2c-66da-4448-bae1-ac26fcdd3627\",\n  \"EntryPoint\": \"/bin/app\",\n  \"CmdArgs\": [ \"--ScopeID\", \"0ne0099999D\" ],\n  \"Capabilities\": {\n    \"SystemEventNotifications\": true,\n    \"SoftwareUpdateDeferral\": true,\n    \"Gpio\": [ \"$AZURE_CONNECTED_LED\", \"$BUTTON_B\" ],\n    \"Pwm\": [ \"$PWM_CLICK_CONTROLLER\", \"$PWM_RGB_CONTROLLER\" ],\n    \"I2cMaster\": [ \"$I2C_ISU2\" ],\n    \"Adc\": [ \"$AVNET_MT3620_SK_ADC_CONTROLLER0\" ],\n    \"AllowedConnections\": [\n        \"global.azure-devices-provisioning.net\",\n        \"iotc-9999bc-3305-99ba-885e-6573fc4cf701.azure-devices.net\",\n        \"iotc-789999fa-8306-4994-b70a-399c46501044.azure-devices.net\",\n        \"iotc-7a099966-a8c1-4f33-b803-bf29998713787.azure-devices.net\",\n        \"iotc-97299997-05ab-4988-8142-e299995acdb7.azure-devices.net\",\n        \"iotc-d099995-7fec-460c-b717-e99999bf4551.azure-devices.net\",\n        \"iotc-789999dd-3bf5-49d7-9e12-f6999991df8c.azure-devices.net\",\n        \"iotc-29999917-7344-49e4-9344-5e0cc9999d9b.azure-devices.net\",\n        \"iotc-99999e59-df2a-41d8-bacd-ebb9999143ab.azure-devices.net\",\n        \"iotc-c0a9999b-d256-4aaf-aa06-e90e999902b3.azure-devices.net\",\n        \"iotc-f9199991-ceb1-4f38-9f1c-13199992570e.azure-devices.net\"\n    ],\n    \"DeviceAuthentication\": \"9abc79eb-9999-43ce-9999-fa8888888894\"\n  },\n  \"ApplicationType\": \"Default\"\n}\n</code></pre> </li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/10-Deploy-the-Altair-emulator/","title":"10 Deploy the Altair emulator","text":"<ol> <li>Ensure Release configuration is selected.</li> <li>Press ctrl+F5 to compile and deploy the Altair emulation application to your Azure Sphere.</li> </ol>"},{"location":"50-azsphere/Cloud-services/Azue-IoT-Central/10-Deploy-the-Altair-emulator/#connect-the-altair-web-terminal","title":"Connect the Altair web terminal","text":"<p>The Altair emulator will start running on the Azure Sphere device. Now connect the Altair web terminal.</p>"},{"location":"50-azsphere/Cloud-services/Open-Weather-Map/02-Open-Weather-Map/","title":"Open Weather Map","text":"<p>Connecting the Open Weather Map cloud service is optional, free, and recommended so the Altair emulator can stream weather and pollution information to Azure IoT Central.</p>"},{"location":"50-azsphere/Cloud-services/Open-Weather-Map/02-Open-Weather-Map/#create-an-open-weather-map-api-key","title":"Create an Open Weather Map API Key","text":"<ol> <li>From your web browser navigate to https://openweathermap.org/api</li> <li>Sign in to Open Weather Map</li> <li>Select API from the Open Weather Map main menu.</li> <li>Subscribe to the Current Weather Data. Select the Free option, and select Get API key.</li> <li>Repeat and subscribe to the Air Pollution API. Select the Free option, and select Get API key.</li> <li>Select API Keys from the Open Weather Map site.</li> <li>Copy the Open Weather Map API key somewhere safe as you will need this data when you start the Altair in cloud-connected mode.</li> </ol>"},{"location":"50-azsphere/Cloud-services/Open-Weather-Map/02-Open-Weather-Map/#open-weather-map-air-quality-calculation","title":"Open Weather Map air quality calculation","text":"<p>Open Weather Map air quality calculation is based on the Common Air Quality Index (CAQI). The Common Air Quality Index (CAQI) is an air quality index used in Europe since 2006.</p> <p></p> <p>For more information, refer to the calculation of Air Quality index.</p>"},{"location":"50-azsphere/Cloud-services/Open-Weather-Map/03-Add-open-weather-map/","title":"Add Open Weather Map Key","text":""},{"location":"50-azsphere/Cloud-services/Open-Weather-Map/03-Add-open-weather-map/#open-weather-map-weather-and-pollution-service","title":"Open Weather Map weather and pollution service","text":"<p>To connect the Altair emulator to the Open Weather Map weather and pollution APIs you'll need to declare the Open Weather Map API key.</p> <p>Update the cmdArgs section of the app_manifest.json file.</p> <pre><code>\"CmdArgs\": [\n    \"--ScopeID\",\n    \"\",\n    \"-o\",\n    \"REPLACE_WITH_YOUR_OPEN_WEATHER_MAP_API_KEY\"\n],\n</code></pre>"},{"location":"50-azsphere/Cloud-services/Open-Weather-Map/03-Add-open-weather-map/#default-app_manifestjson","title":"Default app_manifest.json","text":"<p>The following is the default project app_manifest.json file. Open the Altair emulator app_manifest.json file and update.</p> <pre><code>{\n    \"SchemaVersion\": 1,\n    \"Name\": \"AltairHL_emulator\",\n    \"ComponentId\": \"ac8d863a-4424-11eb-b378-0242ac130002\",\n    \"EntryPoint\": \"/bin/app\",\n    \"CmdArgs\": [\n        \"--ScopeID\",\n        \"\",\n        \"-o\",\n        \"\"\n    ],\n    \"Capabilities\": {\n        \"MutableStorage\": {\n            \"SizeKB\": 64\n        },\n        \"Gpio\": [\n            \"$AZURE_CONNECTED_LED\",\n            \"$BUTTON_A\",\n            \"$BUTTON_B\",\n            \"$LED_RED\",\n            \"$LED_GREEN\",\n            \"$LED_BLUE\"\n        ],\n        \"PowerControls\": [\n            \"SetPowerProfile\"\n        ],\n        \"WifiConfig\": true,\n        \"CertStore\": true,\n        \"EnterpriseWifiConfig\": true,\n        \"NetworkConfig\": true,\n        \"AllowedTcpServerPorts\": [\n            8082\n        ],\n        \"I2cMaster\": [\n            \"$ISU2\"\n        ],\n        \"Adc\": [\n            \"$AVNET_LIGHT_SENSOR\"\n        ],\n        \"AllowedConnections\": [\n            \"global.azure-devices-provisioning.net\",\n            \"api.openweathermap.org\",\n            \"get.geojs.io\",\n            \"raw.githubusercontent.com\"\n        ],\n        \"DeviceAuthentication \": null,\n        \"AllowedApplicationConnections\": [\n            \"2e319eae-7be5-4a0c-ba47-9353aa6ca96a\",\n            \"9b684af8-21b9-42aa-91e4-621d5428e497\",\n            \"005180bc-402f-4cb3-a662-72937dbcde47\",\n            \"6583cf17-d321-4d72-8283-0b7c5b56442b\",\n            \"AF8B26DB-355E-405C-BBDE-3B851668EE23\"\n        ]\n    },\n    \"ApplicationType\": \"Default\"\n}\n</code></pre>"},{"location":"50-azsphere/Cloud-services/Open-Weather-Map/10-Deploy-the-Altair-emulator/","title":"Deploy the Altair emulator","text":"<ol> <li>Ensure Release configuration is selected.</li> <li>Press ctrl+F5 to compile and deploy the Altair emulation application to your Azure Sphere.</li> </ol>"},{"location":"50-azsphere/Cloud-services/Open-Weather-Map/10-Deploy-the-Altair-emulator/#connect-the-altair-web-terminal","title":"Connect the Altair web terminal","text":"<p>The Altair emulator will start running on the Azure Sphere device. Now connect the Altair web terminal.</p>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/","title":"Install developer tools","text":""},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>If you have trouble connecting to the Azure Sphere over USB be sure to disable any VPNs you might have enabled.</li> <li>The TAP-Windows Adapter V9 installed with VPN clients, including the OpenVPN client is not compatible with the TAP-Windows Adapter V9 required and installed by the Azure Sphere SDK. You will need to uninstall the VPN client and reinstall the Azure Sphere SDK for Visual Studio.</li> <li>Windows Users. If running the IoT Central ShowIoTCentralConfig command fails with a missing library message then delete the folder from ShowIoTCentralConfig from AppData\\Local\\Temp\\.net.</li> </ol>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#introduction","title":"Introduction","text":"<p>Follow the Windows or Ubuntu Quickstarts linked below to install the developer tools required to build and deploy the Predictive Maintenance.</p>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#windows-users","title":"Windows users","text":"<p>Azure Sphere development is supported on Windows 10 and 11.</p> <p>You need to complete these steps:</p> <ol> <li>Install the latest Azure Sphere SDK.</li> <li>Install CMake and Ninja.</li> <li>Install Visual Studio Code.</li> <li>Install the Visual Studio Code Azure Sphere extension.</li> <li>Claim your device.</li> <li>Configure networking for the device.</li> </ol> <p>The Quickstart: Install the Azure Sphere SDK for Windows will step you through the process.</p>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#install-the-git-client-for-windows","title":"Install the Git client for Windows","text":"<p>The Git client is required to clone the Predictive Maintenance solution to your computer.</p> <p>Install Git for Windows.</p>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#install-the-gnu-arm-embedded-toolchain-for-windows","title":"Install the GNU Arm Embedded Toolchain for Windows","text":"<ol> <li>Download the GNU Arm Embedded Toolchain for Windows.</li> <li>Install the GNU Arm Embedded Toolchain</li> </ol>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#ubuntu-users","title":"Ubuntu users","text":"<p>Azure Sphere development is supported on Ubuntu 20.04 and 22.04 LTS.</p> <p>You need to do the following:</p> <ol> <li>Install the Azure Sphere SDK.</li> <li>Set up the device connection.</li> <li>Install CMake and Ninja.</li> <li>Install Visual Studio Code.</li> <li>Install the Visual Studio Code Azure Sphere extension.</li> <li>Claim your device.</li> <li>Configure networking for the device.</li> </ol> <p>The Quickstart: Install the Azure Sphere SDK for Linux will step you through the process.</p>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#install-the-git-client-for-linux","title":"Install the Git client for Linux","text":"<p>The Git client is required to clone the Predictive Maintenance solution to your computer.</p> <pre><code>sudo apt install git\n</code></pre>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#install-the-gnu-arm-embedded-toolchain-for-linux","title":"Install the GNU Arm Embedded Toolchain for Linux","text":"<p>Install the GNU Arm Embedded Toolchain for Linux</p> <ol> <li>Download the latest GNU Arm Embedded Toolchain.</li> <li> <p>Install the downloaded package. The following command installs the toolchain in the /opt directory. Note, you will need to update the filename to match the version you downloaded.</p> <pre><code>sudo tar -xjvf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2 -C /opt\n</code></pre> </li> <li> <p>Update your path. Open ~/.bashrc and add to the end.</p> <pre><code>export PATH=$PATH:/opt/gcc-arm-none-eabi-10.3-2021.10/bin\n</code></pre> </li> <li> <p>Optional: The real-time core debugger relies on the libncurses.so.5 library. Depending on your system setup, this library may already be install, if not, then run the following commands.</p> <pre><code>sudo add-apt-repository universe\nsudo apt-get install libncurses5\n</code></pre> </li> </ol>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#recommended-visual-studio-code-extension","title":"Recommended Visual Studio Code Extension","text":"<p>The Peacock extension allows you to change the color of your Visual Studio Code workspace. The Peacock extension is useful when you have multiple instances of Visual Studio Code open debugging code on high-level and real-time cores.</p> <ol> <li>Open Extensions sideBar panel in Visual Studio Code<ul> <li>Or choose the menu options for View \u2192 Extensions</li> </ul> </li> <li>Search for Peacock</li> <li>Click Install</li> <li>Click Reload, if required</li> </ol>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#delete-existing-applications-on-azure-sphere","title":"Delete existing applications on Azure Sphere","text":"<ol> <li>From the Windows PowerShell command-line or Linux Terminal, run the following command to delete any existing applications on the device.</li> </ol> <pre><code>azsphere device sideload delete\n</code></pre> <ol> <li>Restart Azure Sphere.</li> </ol> <pre><code>azsphere device restart\n</code></pre>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#enable-high-level-core-development","title":"Enable high-level core development","text":"<ol> <li>From the Windows PowerShell command-line or Linux Terminal, run the following command to enable high-level app development on the device.</li> </ol> <pre><code>azsphere device enable-development\n</code></pre>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#enable-real-time-core-development","title":"Enable real-time core development","text":""},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#windows-users_1","title":"Windows users","text":"<ol> <li>Open the Windows PowerShell command-line as Administrator, and run the following command to enable real-time core development on the device.</li> </ol> <pre><code>azsphere device enable-development -r\n</code></pre> <ol> <li>Close the Windows PowerShell command-line</li> </ol>"},{"location":"50-azsphere/Compile-and-deploy/01-Install-developer-tools/#ubuntu-users_1","title":"Ubuntu users","text":"<ol> <li>Open the Linux Terminal and run the following command to enable real-time core development on the device.</li> </ol> <pre><code>azsphere device enable-development -r\n</code></pre>"},{"location":"50-azsphere/Compile-and-deploy/02-Deploy-the-Altair-to-Azure-Sphere/","title":"Deploy the Altair emulator","text":""},{"location":"50-azsphere/Compile-and-deploy/02-Deploy-the-Altair-to-Azure-Sphere/#cmakelist-configuration","title":"CMakeList configuration","text":"<p>Open the AltairHL_emulator folder with Visual Studio Code.</p> <ol> <li> <p>Update the CMakeList.txt configuration file</p> <p>The CMakeList.txt file must be configured to match your hardware. The following snippet of CMakeList shows the available configuration options.</p> <pre><code># SELECT DEVELOPER BOARD ##########################################################################################\n#\nset(AVNET TRUE \"AVNET Azure Sphere Starter Kit Revision 1 \")\n# set(AVNET_REV_2 TRUE \"AVNET Azure Sphere Starter Kit Revision 2 \")\n# set(SEEED_STUDIO_RDB TRUE \"Seeed Studio Azure Sphere MT3620 Development Kit (aka Reference Design Board or rdb)\")\n# set(SEEED_STUDIO_RDB_ETHERNET TRUE \"Seeed Studio Azure Sphere MT3620 Development Kit with ethernet shield\")\n# set(SEEED_STUDIO_MDB TRUE \"Seeed Studio Azure Sphere Mini Developer Board\")\n#\n###################################################################################################################\n\n# SELECT FRONT PANEL CONFIG #######################################################################################\n#\nset(ALTAIR_FRONT_PANEL_NONE TRUE \"Altair on Azure Sphere with no panel.\")\n# set(ALTAIR_FRONT_PANEL_RETRO_CLICK TRUE \"Avnet with the MikroE 8800 Retro Click\")\n# set(ALTAIR_FRONT_PANEL_KIT TRUE \"Altair front panel board\")\n#\n###################################################################################################################\n\n# ENABLE SD CARD ##################################################################################################\n#\n# The MikroE microSD Click works with the Avnet Azure Sphere Starter Kit Rev 1 and Rev 2 when in Socket 1.\n# The MikroE microSD Click works with the Mikroe 8800 Retro Click in Socket 2\n# Uncomment the \"set(MICRO_SD_CLICK\" line below to enable the MikroE microSD Click\n#\n# set(MICRO_SD_CLICK TRUE \"MikroE microSD Click for CP/M read/write to SD Card\")\n#\n###################################################################################################################\n</code></pre> </li> </ol>"},{"location":"50-azsphere/Compile-and-deploy/02-Deploy-the-Altair-to-Azure-Sphere/#enable-front-panel-kit","title":"Enable Front Panel kit","text":"<p>If you have built an Altair Front Panel, you need to enable Azure Sphere SPI on ISU1.  Open the app_manifest.json file and uncomment the following line.</p> <pre><code>//  Uncomment the following line to enable SPI on ISU1 for the Altair Front Panel\n// \"SpiMaster\": [ \"$MT3620_ISU1_SPI\" ],\n</code></pre>"},{"location":"50-azsphere/Compile-and-deploy/02-Deploy-the-Altair-to-Azure-Sphere/#deploy-the-altair-emulator-to-the-azure-sphere","title":"Deploy the Altair emulator to the Azure Sphere.","text":"<ol> <li>Ensure Release configuration is selected.</li> <li>Press ctrl+F5 to compile and deploy the Altair emulation application to your Azure Sphere.</li> </ol>"},{"location":"50-azsphere/Compile-and-deploy/02-Deploy-the-Altair-to-Azure-Sphere/#connect-the-altair-web-terminal","title":"Connect the Altair web terminal","text":"<p>The Altair emulator will start running on the Azure Sphere device. Now connect the Altair web terminal.</p>"},{"location":"60-programming/00-Introduction/","title":"Introduction","text":"<p>Learning how to program the Altair 8800 emulator is a great way to learn about the history of computing and the fundamentals of computer programming.</p> <p>In this section, you'll learn how to program the Altair 8800 emulator. You'll learn how to write programs in machine code, assembly language, C, and BASIC. You'll also learn how to use the Altair 8800 emulator's built-in debugger.</p> <p>Be sure to review the:</p> <ol> <li>Manuals</li> <li>Editing files</li> <li>i8088 IO Ports</li> <li>and the section for the programming language you are interested in.</li> </ol>"},{"location":"60-programming/00-Manuals/","title":"Manuals","text":"<p>The following manuals are grouped by topic to help you quickly find what you need when programming on the Altair emulator.</p>"},{"location":"60-programming/00-Manuals/#basic-programming","title":"BASIC Programming","text":"<ul> <li>Altair 8800 BASIC Reference Manual</li> <li>Microsoft BASIC-80 Reference Manual</li> </ul>"},{"location":"60-programming/00-Manuals/#c-programming","title":"C Programming","text":"<ul> <li>BDS C Compiler Reference Manual</li> <li>The Complete BD Software C Compiler</li> </ul>"},{"location":"60-programming/00-Manuals/#8080-assembly-language-development","title":"8080 / Assembly Language Development","text":"<ul> <li>Intel 8080 Assembly Language Programming Manual</li> <li>Intel 8080 Microcomputer Systems User's Manual</li> <li>Microsoft Macro-80 Assembler Reference Manual</li> <li>Microsoft Link-80 Loader Reference Manual</li> <li>CP/M Assembler</li> <li>CP/M Dynamic Debugging Tool</li> </ul>"},{"location":"60-programming/00-Manuals/#cpm-bdos-system-interface","title":"CP/M BDOS System Interface","text":"<ul> <li>CP/M 2 System Interface</li> <li>CP/M BDOS System Calls Reference</li> </ul>"},{"location":"60-programming/00-Manuals/#cpm-operating-system-system-interfaces","title":"CP/M Operating System / System Interfaces","text":"<ul> <li>CP/M Operating System Manual</li> <li>CP/M for the Altair 8800 and Altair Floppy Drives</li> <li>CP/M Frequently Asked Questions</li> <li>CP/M on Wikipedia</li> </ul>"},{"location":"60-programming/00-Manuals/#productivity-applications","title":"Productivity / Applications","text":"<ul> <li>MicroPro Word-Master Operators Guide</li> </ul>"},{"location":"60-programming/00-Manuals/#altair-8800-hardware","title":"Altair 8800 Hardware","text":"<ul> <li>Altair Floppy Disk (88-DCDD)</li> </ul>"},{"location":"60-programming/01-Editing-files/","title":"Editing Files: Developer Workflow","text":"<p>You can work with files for the Altair CP/M system in two primary ways:</p> <ol> <li>External editor on your host (Recommended) \u2013 Edit locally with a modern editor such as Visual Studio Code. This gives you syntax highlighting, search, Copilot / LLM assistance, version control, etc.</li> <li>On\u2011emulator editing (Word-Master) \u2013 Edit inside the emulated CP/M environment using the bundled Word-Master editor. Authentic, but slower and less ergonomic for substantial changes.</li> </ol>"},{"location":"60-programming/01-Editing-files/#editing-files-with-external-tools-recommended","title":"Editing Files with External Tools (Recommended)","text":"<p>Follow this fast loop for most development:</p> <ol> <li>Pick an editor \u2013 Example: Visual Studio Code (with optional Copilot / LLM assistance).</li> <li>Create a folder on your host computer to hold your source files.</li> <li>Create or modify your source \u2013 Edit as normal on your host (BASIC, C, ASM, etc.).</li> <li> <p>Expose the directory over HTTP \u2013 Either:</p> <ul> <li>Use the VS Code Use the Visual Code Live Server (Five Server) extension extension, or</li> <li>Use a simple built\u2011in Python server:</li> </ul> <pre><code>python -m http.server 5500\n</code></pre> </li> <li> <p>Tell the Altair side where to fetch files \u2013 In the Altair web terminal, set the HTTP endpoint (only needed once per session):</p> <p>Change to the <code>B:</code> drive first if not already there.</p> <pre><code>gf -e &lt;your_ip_address&gt;:5500\n</code></pre> <p>This corresponds to <code>http://&lt;your_ip_address&gt;:5500</code>.</p> <p>Note, the endpoint is stored in a file on the emulated disk called <code>gf.txt</code> so it persists across emulator restarts.</p> </li> <li> <p>Transfer a file into CP/M \u2013 From the CP/M prompt:</p> <pre><code>gf -f hello.bas\n</code></pre> <p>(File names are case\u2011insensitive; CP/M convention is uppercase.)</p> </li> <li> <p>Run or build \u2013 Examples:</p> <ul> <li>BASIC: <code>mbasic hello</code></li> </ul> </li> </ol> <p>Repeat steps 2, 5, and 6 as you refine your program.</p>"},{"location":"60-programming/01-Editing-files/#gf-command-reference","title":"GF Command Reference","text":"<p>The <code>gf</code> (Get File) utility is a versatile file transfer tool with multiple options for downloading files from web endpoints or the built-in games repository.</p>"},{"location":"60-programming/01-Editing-files/#getting-help","title":"Getting Help","text":"<p>To see all available options and usage information:</p> <pre><code>gf --help\n</code></pre> <p>This displays the full help message with examples.</p>"},{"location":"60-programming/01-Editing-files/#setting-the-http-endpoint","title":"Setting the HTTP Endpoint","text":"<p>Set a custom HTTP or HTTPS endpoint URL for file transfers:</p> <pre><code>gf -e http://192.168.1.100:5500\ngf -e https://example.com/files\n</code></pre> <p>The endpoint URL is automatically saved to <code>gf.txt</code> on the emulated disk and persists across emulator restarts.</p>"},{"location":"60-programming/01-Editing-files/#downloading-files-from-your-endpoint","title":"Downloading Files from Your Endpoint","text":"<p>Download a specific file from the configured endpoint:</p> <pre><code>gf -f myfile.txt\ngf -f hello.bas\ngf -f program.c\n</code></pre> <p>File names are case-insensitive, following CP/M conventions.</p>"},{"location":"60-programming/01-Editing-files/#downloading-games-from-built-in-repository","title":"Downloading Games from Built-in Repository","text":"<p>The <code>gf</code> utility includes access to a built-in games repository. Download games using:</p> <pre><code>gf -g love.bas\ngf -g adventure.bas\n</code></pre> <p>This feature provides quick access to classic games without needing to set up your own web server.</p>"},{"location":"60-programming/01-Editing-files/#version-information","title":"Version Information","text":"<p>Check the current version of the GF utility:</p> <pre><code>gf --version\n</code></pre>"},{"location":"60-programming/01-Editing-files/#complete-command-summary","title":"Complete Command Summary","text":"<pre><code>GF (Get File) - File Transfer Utility v1.3\nTransfer files from web over HTTP(s)\n\nUsage: gf [--help] [--version] [-e &lt;url&gt;] [-f &lt;filename&gt;] [-g &lt;gamefile&gt;]\n\nOptions:\n  --help       Show this help message\n  --version    Show version information\n  -e &lt;url&gt;     Set a custom HTTP/HTTPS endpoint URL\n  -f &lt;filename&gt; Download a specific file from the configured endpoint\n  -g &lt;gamefile&gt; Download a game file from the built-in games repository\n\nExamples:\n  gf -e http://localhost:5500     Set local development server\n  gf -e https://example.com/files Set remote HTTPS endpoint\n  gf -f myfile.txt                Download myfile.txt from configured endpoint\n  gf -g love.bas                  Download love.bas from games repository\n</code></pre>"},{"location":"60-programming/01-Editing-files/#automating-transfers-builds-with-cpm-submit","title":"Automating Transfers &amp; Builds with CP/M SUBMIT","text":"<p>The Submit command automates file transfer and build steps and is a a time-saver.</p> <p>Prerequisite: Ensure the endpoint is already set (<code>gf -e &lt;your_ip_address&gt;:5500</code>).</p> <p>On the <code>B:</code> drive there are two helper submit files: <code>C.SUB</code> and <code>ASM.SUB</code>.</p> <p>They perform (a) fetch via <code>gf -f</code>, then (b) compile / assemble, then (c) link.</p> <p>Examples:</p>"},{"location":"60-programming/01-Editing-files/#transfer-compile-and-link-a-c-source-file","title":"Transfer, compile, and link a C source file","text":"<pre><code>submit c hello\n</code></pre> <p>Information</p> <p>The <code>c.sub</code> file fetches the source file, compiles it with BDS C, then links it to create <code>hello.com</code>.</p> <pre><code>gf -f $1.c\ncc $1   \nclink $1 dxweb dxtimer\n</code></pre> <p>Now you can run the program:</p> <pre><code>hello\n</code></pre>"},{"location":"60-programming/01-Editing-files/#transfer-assemble-and-link-an-assembly-source-file","title":"Transfer, assemble, and link an assembly source file","text":"<p>Change to the <code>B:</code> drive first if not already there.</p> <pre><code>submit asm vibe\n</code></pre> <p>Information</p> <p>The <code>asm.sub</code> file fetches the source file, assembles it with ASM80, then links it to create <code>demo.com</code>.</p> <pre><code>gf -f $1.asm\nd:asm $1\nd:load $1\nera $1.prn\nera $1.hex\n</code></pre> <p>Now you can run the program:</p> <pre><code>vibe\n</code></pre>"},{"location":"60-programming/01-Editing-files/#editing-files-with-the-word-master-text-editor","title":"Editing Files with the Word-Master Text Editor","text":"<p>The emulator bundles MicroPro Word-Master. Historically powerful, but spartan compared with modern editors.</p>"},{"location":"60-programming/01-Editing-files/#tenminute-video-introduction","title":"Ten\u2011minute video introduction","text":"<p>Fastest workflow: edit with Visual Studio Code, then copy using <code>gf</code>. Watch the video for an overview:</p> <p>\u25b6 Video: Editing Files Workflow (YouTube)</p> <p>If embedding is required later, update the markdown linter configuration to allow <code>iframe</code> (rule MD033) and restore the embed.</p>"},{"location":"60-programming/01-Editing-files/#editing-inside-word-master","title":"Editing inside Word-Master","text":"<p>Preferred path remains: local edit + <code>gf</code> transfer. But if you want the authentic experience:</p> <ol> <li>Toggle the web terminal to character mode (<code>Ctrl+L</code>).</li> <li>Launch Word-Master (e.g., <code>wm filename.asm</code>).</li> <li>Use the control key commands below for navigation / editing.</li> <li>When finished, exit Word-Master, then toggle back to line mode (<code>Ctrl+L</code>) for faster terminal interaction.</li> </ol> <p></p> <p>For full details see the Word-Master user guide.</p> <p>The following table lists the Ctrl characters that Word-Master uses. This list is sourced from the Experiencing the Altair 8800 blog.</p> <pre><code>VIDEO MODE SUMMARY\n\n^O   INSERTION ON/OFF           RUB  DELETE CHR LEFT\n^S   CURSOR LEFT CHAR           ^G   DELETE CHR RIGHT\n^D   CURSOR RIGHT CHAR          ^\\   DELETE WORD LEFT\n^A   CURSOR LEFT WORD           ^T   DELETE WORD RIGHT\n^F   CURSOR RIGHT WORD          ^U   DELETE LINE LEFT\n^Q   CURSOR RIGHT TAB           ^K   DELETE LINE RIGHT\n^E   CURSOR UP LINE             ^Y   DELETE WHOLE LINE\n^X   CURSOR DOWN LINE           ^I   PUT TAB IN FILE\n^^   CURSOR TOP/BOT SCREEN      ^N   PUT CRLF IN FILE\n^B   CURSOR RIGHT/LEFT LINE     ^@   DO NEXT CHR 4X\n^W   FILE DOWN 1 LINE           ^P   NEXT CHR IN FILE\n^Z   FILE UP 1 LINE             ^V   NEXT CHR(S) TO VIDEO\n^R   FILE DOWN SCREEN           ESC  EXIT VIDEO MODE\n^C   FILE UP SCREEN             ^J   DISPLAY THIS\n</code></pre> <p>In character input mode, these host key mappings help mirror Word-Master's control sequences:</p> <pre><code>Keyboard key            Word-Master Ctrl Sequence\n----------------------------------------------\nInsert                  ^O   INSERTION ON/OFF\nDelete                  ^G   DELETE CHR RIGHT\nCursor Left             ^S   CURSOR LEFT CHAR\nCursor Right            ^D   CURSOR RIGHT CHAR\nCursor Up               ^E   CURSOR UP LINE\nCursor Down             ^X   CURSOR DOWN LINE\n</code></pre>"},{"location":"60-programming/01-Vibe-Coding/","title":"Vibe Coding the Altair","text":""},{"location":"60-programming/01-Vibe-Coding/#what-is-vibe-coding-with-an-llm","title":"What is Vibe-Coding with an LLM?","text":"<p>Vibe coding is a programming approach that leverages Large Language Models (LLMs) to assist in writing code. It involves using AI tools to generate, complete, or suggest code snippets based on natural language prompts or partial code inputs. This method can significantly speed up the coding process, help overcome writer's block, and provide creative solutions to programming challenges.</p>"},{"location":"60-programming/01-Vibe-Coding/#why-use-vibe-coding-for-the-altair-8800","title":"Why Use Vibe-Coding for the Altair 8800?","text":"<p>The Altair 8800 is a vintage microcomputer that has a unique architecture and programming environment. Vibe-Coding can help modern developers interact with this classic system by:</p> <ul> <li>Generating code snippets compatible with the Altair's architecture.</li> <li>Providing explanations and documentation for legacy programming concepts.</li> <li>Assisting in debugging and optimizing code for the Altair.</li> </ul>"},{"location":"60-programming/01-Vibe-Coding/#getting-started-with-vibe-coding-for-the-altair-8800","title":"Getting Started with Vibe-Coding for the Altair 8800","text":"<ol> <li>Choose an LLM Tool: Select a Large Language Model platform that supports code generation, such as OpenAI's GPT-4, Codex, or similar services.</li> <li>Set Up Your Environment: Ensure you have access to the Altair 8800 emulator or hardware, along with any necessary development tools.</li> <li>Define Your Goals: Clearly outline what you want to achieve with your Altair programming project.</li> <li>Craft Prompts: Write clear and specific prompts to guide the LLM in generating relevant code snippets.</li> <li>Iterate and Refine: Use the generated code as a starting point, test it on the Altair, and refine it as needed.</li> </ol>"},{"location":"60-programming/01-Vibe-Coding/#altair-emulator-io-port-sdk","title":"Altair Emulator IO Port SDK","text":"<p>Sample code in the AppSamples/sdk folder demonstrates how to use the IO port features via a C language SDK. For details, see the SDK samples. These examples are also helpful for LLM-assisted development and Vibe-Coding for C, Microsoft Basic, and Assembly programming.</p>"},{"location":"60-programming/01-Vibe-Coding/#leverage-existing-code-samples","title":"Leverage existing code samples","text":"<p>Point the LLM to existing code samples in the AppSamples folder. These samples can provide valuable context and inspiration for your prompts.</p> <ul> <li>sdk/dxtimer.c</li> <li>breakout.c</li> <li>tetris.c</li> <li>onboard.c</li> </ul> <p>Are great examples how to use the IO ports and other features such as timers and VT100 terminal control characters of the Altair 8800 for Vibe-Coding.</p> <p>When crafting prompts for the LLM, consider including references to existing documentation and manuals for the Altair 8800. This can help the model generate more accurate and contextually relevant code. Useful resources include:</p>"},{"location":"60-programming/01-Vibe-Coding/#example-prompts-for-vibe-coding","title":"Example Prompts for Vibe-Coding","text":"<ul> <li>\"Write a BASIC program for the Altair 8800 that calculates the factorial of a number.\"</li> <li>\"Explain how to set up I/O ports on the Altair 8800.\"</li> </ul>"},{"location":"60-programming/01-Vibe-Coding/#best-practices","title":"Best Practices","text":"<ul> <li>Review Generated Code: Always review and test the code generated by the LLM to ensure it meets your requirements and is free of errors.</li> <li>Combine with Traditional Coding: Use Vibe-Coding as a supplement to your traditional coding practices.</li> <li>Stay Updated: Keep abreast of advancements in LLM technology to leverage new features and capabilities.</li> </ul>"},{"location":"60-programming/01-Vibe-Coding/#conclusion","title":"Conclusion","text":"<p>Vibe-Coding with an LLM can be a powerful tool for programming the Altair 8800, making it easier to navigate its unique challenges and unlock its potential. By integrating AI into your development workflow, you can enhance productivity and creativity in your projects.</p>"},{"location":"60-programming/01-Vibe-Coding/#additional-resources","title":"Additional Resources","text":"<ul> <li>OpenAI GPT-4</li> <li>Emulators for the Altair 8800</li> </ul>"},{"location":"60-programming/01-i8080-IO-Ports/","title":"Intel 8080 IO Ports","text":"<p>The Intel 8080 CPU can address up to 256 input ports and 256 output ports; allowing for virtually unlimited system expansion. Access to the ports is via the IN and OUT Intel 8080 CPU instructions, see page 38.</p>"},{"location":"60-programming/01-i8080-IO-Ports/#intel-8080-io-ports-and-peripherals","title":"Intel 8080 IO ports and peripherals","text":""},{"location":"60-programming/01-i8080-IO-Ports/#altair-emulator-software-enabled-ports","title":"Altair emulator software-enabled ports","text":"<p>The Altair emulator uses Intel 8080 IO ports to provide time services, random numbers, and access to cloud services.</p> <ul> <li>You can access Intel 8080 IO ports from BASIC, C, and Assembly programming languages, and directly using Intel 8080 opcodes. See Using Intel 8080 Input Output ports.</li> <li>The Intel 8080 software-enabled IO ports are implemented in the io_ports.c file.</li> <li>You can extend the Altair 8800 by adding additional IO port functions, for example, integrating machine learning capabilities.</li> </ul>"},{"location":"60-programming/01-i8080-IO-Ports/#altair-emulator-io-port-sdk","title":"Altair Emulator IO Port SDK","text":"<p>Sample code in the AppSamples/sdk folder demonstrates how to use the IO port features via a C language SDK. For details, see the SDK samples. These examples are also helpful for LLM-assisted development and Vibe-Coding for C, Microsoft Basic, and Assembly programming.</p>"},{"location":"60-programming/01-i8080-IO-Ports/#output-ports","title":"Output ports","text":"<p>The following tables show output port numbers and port data values. Typically, calling an output port will load data to be read via an input port.</p>"},{"location":"60-programming/01-i8080-IO-Ports/#utility-output-ports","title":"Utility output ports","text":"Port Port data Loads 24 0-255 Set timer 0 period high byte (milliseconds) 25 0-255 Set timer 0 period low byte (milliseconds) and start timer 26 0-255 Set timer 1 period high byte (milliseconds) 27 0-255 Set timer 1 period low byte (milliseconds) and start timer 28 0-255 Set timer 2 period high byte (milliseconds) 29 0-255 Set timer 2 period low byte (milliseconds) and start timer 30 0-255 Set timer period in seconds 41 0 System tick count 42 0 Current UTC date and time 43 0 Current local date and time 44 0 Generates a random number between -32000 and 32000 109 0 set getfile (gf) custom endpoint url index to 0. Should be called before setting the custom endpoint url. 110 ASCII Set getfile (gf) custom endpoint url 111 0 Load getfile (gf) custom endpoint url 114 ASCII Set web request file name and call on NULL"},{"location":"60-programming/01-i8080-IO-Ports/#input-ports","title":"Input ports","text":"<p>Typically, input ports will read data loaded by an output port.</p> Port Description 24 Query timer 0 milliseconds status. Enabled or expired (true or false) 25 Query timer 0 milliseconds status. Enabled or expired (true or false) 26 Query timer 1 milliseconds status. Enabled or expired (true or false) 27 Query timer 1 milliseconds status. Enabled or expired (true or false) 28 Query timer 2 milliseconds status. Enabled or expired (true or false) 29 Query timer 2 milliseconds status. Enabled or expired (true or false) 30 Query seconds timer status. Enabled or expired (true or false) 31 Query publish JSON pending status. Enabled or expired (true or false) 32 Query publish weather pending status. Enabled or expired (true or false) 69 Is network ready 200 Read loaded byte stream 201 Read webget file stream 123 Read OpenAi ChatGPT stream 120 Read OpenAI streaming status 121 Read OpenAI message 122 Read OpenAI finished status"},{"location":"60-programming/01-i8080-IO-Ports/#weather-ports","title":"Weather ports","text":"Port Port data Loads 34 0 \"Celsius\" string literal 34 1 \"Millibar\" string literal 34 2 \"Humidity %\" string literal 34 3 \"Wind km/h\" string literal 34 4 \"Wind degrees\" string literal 34 5 \"Observation\" string literal 35 0 Temperature (Note 1) 35 1 Pressure (Note 1) 35 2 Relative humidity (Note 1) 35 3 Wind speed (Note 1) 35 4 Wind direction (Note 1) 35 5 Weather observation (Note 1)"},{"location":"60-programming/01-i8080-IO-Ports/#location-ports","title":"Location ports","text":"Port Port data Loads 36 0 \"Latitude\" string literal 36 1 \"Longitude\" string literal 36 2 \"Longitude\" string literal 36 3 \"City\" string literal 37 0 Latitude (Note 2) 37 1 Longitude (Note 2) 37 2 Country name (Note 2) 37 3 City name (Note 2)"},{"location":"60-programming/01-i8080-IO-Ports/#pollution-ports","title":"Pollution ports","text":"Port Port data Loads 38 0 \"AQI(CAQI)\" string literal 38 1 \"CO\" string literal 38 2 \"NO\" string literal 38 3 \"NO2\" string literal 38 4 \"O3\" string literal 38 5 \"SO2\" string literal 38 6 \"NH3\" string literal 38 7 \"PM2.5\" string literal 38 8 \"PM1.0\" string literal 39 0 Air quality index (Note 1) 39 1 Carbon monoxide level (Note 1) 39 2 Nitrogen monoxide level (Note 1) 39 3 Nitrogen dioxide level (Note 1) 39 4 Ozone level (Note 1) 39 5 Sulphur dioxide level (Note 1) 39 6 Ammonia level (Note 1) 39 7 Particulate matter 2.5 level (Note 1) 39 8 Particulate matter 1.0 level (Note 1)"},{"location":"60-programming/01-i8080-IO-Ports/#8x8-led-panels","title":"8x8 LED Panels","text":"<ul> <li>Pi Sense HAT</li> <li>Mikroe Retro 8800 Click</li> </ul> Port Port data Loads 65 0..8 Power management LED brightness"},{"location":"60-programming/01-i8080-IO-Ports/#general-ports","title":"General ports","text":"Port Port data Loads 70 0 Loads Altair emulator version number"},{"location":"60-programming/01-i8080-IO-Ports/#display-8x8-led-panel-ports","title":"Display 8x8 LED panel ports","text":"Port Port data Loads 80 0, 1, 2 0 = Bus mode, 1 = Font mode, 2 = Bitmap mode 81 0, 1, 2 8x8 LED Panel RGB color. 0 = Red, 1 = Green, 2 = Blue 82 0..255 Set 8x8 LED Panel Red palette 83 0..255 Set 8x8 LED Panel Green palette 84 0..255 Set 8x8 LED Panel Blue palette 85 0..255 Display ASCII character 90 0..255 Set row 0 bitmap 91 0..255 Set row 1 bitmap 92 0..255 Set row 2 bitmap 93 0..255 Set row 3 bitmap 94 0..255 Set row 4 bitmap 95 0..255 Set row 5 bitmap 96 0..255 Set row 6 bitmap 97 0..255 Set row 7 bitmap 98 0..63 Turn pixel n on 99 0..63 Turn pixel n off 100 0..63 Pixel flip 101 0 Clear, turn all pixels off 102 0 Draw bitmap"},{"location":"60-programming/01-i8080-IO-Ports/#openai-chatgpt","title":"OpenAI ChatGPT","text":"Port Port data Loads 120 0..255 Set system Message 121 0..255 Set user message 122 0..255 Set assistant message 123 0 Clear all messages 124 0 Load ChatGPT stream"},{"location":"60-programming/01-i8080-IO-Ports/#publish-to-azure-iot-ports","title":"Publish to Azure IoT ports","text":"Port Port data Loads 31 ASCII Publish JSON to IoT Hub/Central (Max 256 characters) (Note 3) 32 0 Publish weather and pollution data to IoT Hub/Central (Note 3)"},{"location":"60-programming/01-i8080-IO-Ports/#azure-sphere-specific-ports","title":"Azure Sphere specific ports","text":"Port Port data Loads 60 1 or 0 Turn Red LED on or off 61 1 or 0 Turn Green LED on or off 62 1 or 0 Turn Blue LED on or off 63 0 Loads onboard temperature 63 1 Loads onboard pressure 63 2 Loads onboard light sensor 64 0 Loads accelerometer X axis 64 1 Loads accelerometer Y axis 64 2 Loads accelerometer Z axis 64 3 Start the accelerometer timer 64 4 Stop the accelerometer timer 64 5 One-off accelerometer reading 64 6 Calibrate accelerometer for angular rate 64 7 Load accelerometer for angular rate 64 8 Get latest movement inference result 66 0 Power management disable 66 1 Power management enable 66 2 Power management sleep 67 1..255 Power management wake from sleep (seconds) 71 0 Get Azure Sphere OS version number 72 0 Get first 8 characters of Azure Sphere device ID <p>Notes.</p> <ol> <li>Requires an Open Weather Map API Key, and an active internet connection.</li> <li>Requires an active internet connection to call the geojs.io web service.</li> <li>Requires an active internet connection and a free or paid tier or Azure IoT Central.</li> </ol>"},{"location":"60-programming/01-i8080-IO-Ports/#using-intel-8080-input-output-ports","title":"Using Intel 8080 Input Output ports","text":"<p>The following code snippets use the Intel 8080 IO ports. The code samples included on the CP/M boot disk expand on these snippets.</p>"},{"location":"60-programming/01-i8080-IO-Ports/#assembler-access-to-intel-8080-io-ports","title":"Assembler access to Intel 8080 IO Ports","text":"<p>The following assembly code demonstrates the use of the Intel 8080 IO port 30 timer. The code sets a 2-second delay, and then waits for the timer to expire. This is a snippet of the SLEEP.ASM sample included on drive B: of the Altair emulator.</p> <pre><code>      ORG 0100H   ;CP/M base of TPA (transient program area)\n      MVI A,2     ;Move 2 to the accumulator to set a 2 second delay\n      OUT 30      ;Start timer\nLOOP: IN 30       ;Get delay timer state into the accumulator\n      CPI 00H     ;If accumulator equal to 0 then timer has expired\n      JZ BACK     ;Jump on zero\n      JMP LOOP\nBACK: RET\n</code></pre>"},{"location":"60-programming/01-i8080-IO-Ports/#bsd-c-access-to-intel-8080-io-ports","title":"BSD C access to Intel 8080 IO Ports","text":"<p>The following C code demonstrates the use of the Intel 8080 IO port 30 timer. The code sets a 1-second delay, and then waits for the timer to expire. This is a snippet of the HW.C sample included on drive B: of the Altair emulator.</p> <pre><code>outp(30,1);      /* Enable delay for 1 second */\nwhile(inp(30));  /* Wait for delay to expire */\n</code></pre>"},{"location":"60-programming/01-i8080-IO-Ports/#basic-access-to-intel-8080-io-ports","title":"BASIC access to Intel 8080 IO Ports","text":"<p>The following BASIC code demonstrates the use of the Intel 8080 IO port 30 timer. The code sets a 1-second delay, and then waits for the timer to expire. This is a snippet of the COUNT.BAS sample included on drive A: of the Altair emulator.</p>"},{"location":"60-programming/01-i8080-IO-Ports/#delay-io-ports","title":"Delay IO ports","text":"<pre><code>900 REM This sleep subroutine sleeps or delays for 1 second\n1000 OUT 30, 1\n1100 WAIT 30, 1, 1\n1200 RETURN\n</code></pre>"},{"location":"60-programming/01-i8080-IO-Ports/#weather-io-ports","title":"Weather IO ports","text":"<p>The following BASIC code demonstrates the use of Intel 8080 output port 35 to load the current temperature, and the input port to read the temperature. This is a snippet of the WEATHER.BAS sample included on drive A: of the Altair emulator.</p> <pre><code>500 PORT = 34 : REM Set the output port number\n510 PDATA = 0 : REM Set the port data value to 0 for temperature\n520 GOSUB 4800 : REM Loads the temperature and then reads the temperature string\n530 PRINT RSTRING$\n540 END\n\n4800 REM SUBROUTINE READS STRING DATA FROM PORT UNTIL NULL CHARACTER\n4900 OUT PORT, PDATA\n5000 RSTRING$ = \"\"\n5100 C=INP(200) : REM Read the temperature character by character until NULL returned\n5200 IF C = 0 THEN RETURN\n5300 RSTRING$ = RSTRING$ + CHR$(C)\n5400 GOTO 5100\n</code></pre>"},{"location":"60-programming/01-i8080-IO-Ports/#font-support","title":"Font support","text":"<p>The following example shows how to use the Intel 8080 IO ports to display characters on the Pi Sense HAT or Retro Click 8x8 LED panels. To understand IO ports, refer to the io_ports.c source code. This example is included on drive A: in a file named FONT.BAS.</p> <pre><code>100 REM 8x8 LED Panel Demo\n200 OUT 80,1 : REM Flip the 8x8 LED panel to FONT mode\n300 FOR J = 1 TO 10\n400 FOR I = 33 TO 122\n500 OUT 81, I MOD 3 : REM Cycle font color\n600 OUT 85, I : REM Display character on the 8x8 LED panel\n700 PRINT CHR$(I)\n800 OUT 29, 250 : WAIT 29, 1, 1 : REM Pause for 250 milliseconds\n900 NEXT I\n1000 NEXT J\n1100 OUT 80,0\n</code></pre>"},{"location":"60-programming/01-i8080-IO-Ports/#azure-sphere-blinky","title":"Azure Sphere Blinky","text":"<p>The following example shows how to use the Intel 8080 IO ports to blink LEDs on an Azure Sphere. To understand how IO ports are implemented, refer to the io_ports.c source code.</p> <pre><code>5 OUT 80, 1 : REM switch display to font mode\n10 WHILE 1=1 : REM Loop forever\n20 OUT 60, 1 : REM switch on the red LED\n30 OUT 29, 250 : WAIT 29, 1, 1 : REM delay 250 milliseconds\n40 OUT 61, 1 : REM switch on the green LED\n50 OUT 29, 250 : WAIT 29, 1, 1 : REM delay 250 milliseconds\n60 OUT 62, 1 : REM switch on the blue LED\n70 OUT 29, 250 : WAIT 29, 1, 1 : REM delay 250 milliseconds\n80 OUT 60, 0 : OUT 61, 0 : OUT 62, 0 : REM Turn off all LEDs\n85 OUT 29, 250 : WAIT 29, 1, 1 : REM delay 250 milliseconds\n90 WEND\n100 OUT 80, 0 : REM switch display to bus mode\n</code></pre>"},{"location":"60-programming/02-Microsoft-BASIC-programming/","title":"Microsoft BASIC","text":"<p>Bill Gates and Paul Allen wrote Altair BASIC. It was Microsoft's first product. Later, Microsoft released Microsoft BASIC for CP/M, see the Microsoft BASIC-80 reference manual.</p> <p>In the following exercise, you'll learn how to write your first Microsoft BASIC application.</p>"},{"location":"60-programming/02-Microsoft-BASIC-programming/#get-started-with-microsoft-basic-80","title":"Get started with Microsoft BASIC-80","text":"<p>Microsoft BASIC-80 is included on drive A.</p> <ol> <li> <p>Switch back to the web terminal in your web browser.</p> </li> <li> <p>From the CP/M command prompt, run the following command to start Microsoft BASIC.</p> <pre><code>mbasic\n</code></pre> </li> <li> <p>Run an interactive command</p> <pre><code>print \"Hello, world!\"\n</code></pre> <p>The BASIC interpreter with execute the command immediately and display Hello, World!.</p> </li> <li> <p>Enter your first program:</p> <pre><code>10 for i = 1 to 1000000\n20 print i\n30 next i\n</code></pre> </li> <li> <p>Run your program</p> <pre><code>run\n</code></pre> </li> <li> <p>Stop the program by selecting Ctrl+C.</p> </li> <li> <p>Save your program to disk:</p> <pre><code>save \"TEST.BAS\"\n</code></pre> <p>Name all files using CAPITAL LETTERS.</p> </li> <li> <p>Load your program from disk:</p> <pre><code>load \"TEST.BAS\"\n</code></pre> </li> <li> <p>Quit BASIC:</p> <pre><code>system\n</code></pre> </li> <li> <p>Run the following command to start your BASIC application from the CP/M command prompt.</p> <pre><code>mbasic test\n</code></pre> </li> </ol> <p>You can learn more about BASIC from the following BASIC applications included with the Altair emulator:</p> <ul> <li>COUNT.BAS demonstrates how to use the Intel 8080 IO Port 30 to sleep or delay an application for a specific period.</li> <li>DISKRW.BAS is a test application that opens and repeatedly reads and writes a text file.</li> <li>FONT.BAS shows how to write ASCII characters to the 8x8 LED panels on the Pi Sense HAT or Retro Click.</li> <li>JSON.BAS reads weather and pollution data and then publishes JSON data to Azure IoT Central.</li> <li>LOOPY.BAS is a test application that generates a lot of messages.</li> <li>STARTREK.BAS is a game.</li> <li>TICTAK.BAS: A simple game of naughts and crosses.</li> <li>TIME.BAS demonstrates how to use the time Intel 8080 IO ports including setting a sleep timer, access to the system tick counter, and local and UTC date and times.</li> <li>WEATHER.BAS reads weather and pollution data from Open Weather Map and adds random jitter to the temperature data at random intervals. The jittered temperature is used for anomaly detection. The weather and pollution data is then streamed to Azure IoT Central at regular intervals.</li> </ul>"},{"location":"60-programming/02-Microsoft-BASIC-programming/#setting-text-colors","title":"Setting text colors","text":"<p>Text color can be controlled using 4-bit VT220 control characters. For more information, refer to List of ANSI color escape sequences.</p> <p>The standards implementing terminal colors began with limited (4-bit) options. The table below lists the RGB values of the background and foreground colors used for these by a variety of terminal emulators:</p> <p></p>"},{"location":"60-programming/02-Microsoft-BASIC-programming/#use-intel-8080-input-and-output-ports","title":"Use Intel 8080 input and output ports","text":"<p>The BASIC language has support for Intel 8080 CPU input and output port instructions. The TIME.BAS application:</p> <ul> <li>gets the system tick count from port 41</li> <li>gets the UTC date and time from port 42</li> <li>gets the local date and time from port 43</li> <li>and sets a sleep period using output port 30, and then waits on input port 30 for the delay period to expire.</li> </ul> <p>For more information about Intel 8080 IO port mappings, refer to Intel 8080 input and output ports.</p> <p></p> <p>The following BASIC program is the listing of TIME.BAS. The Time app uses color escape codes to control text colors.</p> <pre><code>10 WIDTH 100\n20 PRINT \"====================================================\"\n30 PRINT \"TIME DEMOS\"\n40 SECONDS% = 1\n\n50 WHILE 1\n60 PRINT \"===============================================\"\n\n70 PORT = 41 : GOSUB 160 : PRINT chr$(27) + \"[91;22;24m\" + \"System tick count: \";RSTRING$;chr$(27) + \"[0m\"\n80 PORT = 42 : GOSUB 160 : PRINT chr$(27) + \"[92;22;24m\" + \"UTC date and time: \";RSTRING;chr$(27) + \"[0m\"\n90 PORT = 43 : GOSUB 160 : PRINT chr$(27) + \"[94;22;24m\" + \"Local date and time: \";RSTRING$; chr$(27) + \"[0m\"\n\n130 GOSUB 230\n\n140 WEND\n150 END\n\n160 REM SUBROUTINE READS STRING DATA FROM PORT UNTIL NULL CHARACTER\n170 RSTRING$ = \"\"\n175 OUT PORT, 0\n180 C=INP(200)\n190 IF C = 0 THEN RETURN\n200 RSTRING$ = RSTRING$ + CHR$(C)\n210 GOTO 180\n\n220 REM PAUSE FOR N NUMBER OF SECONDS\n230 PRINT \"\" : PRINT \"Pause\";SECONDS%;\"seconds.\"\n240 OUT 30, SECONDS%\n250 WAIT 30, 1, 1\n260 RETURN\n</code></pre>"},{"location":"60-programming/02-Microsoft-BASIC-programming/#run-the-timebas-application","title":"Run the TIME.BAS application","text":"<ol> <li> <p>To start Microsoft BASIC, from the CP/M command prompt, enter:</p> <pre><code>mbasic time\n</code></pre> <p>Microsoft BASIC starts and runs the TIME.BAS application. The TIME.BAS application displays the system tick count, along with the local and UTC date and time.</p> </li> <li> <p>Stop the program by selecting Ctrl+C.</p> </li> </ol>"},{"location":"60-programming/02-Microsoft-BASIC-programming/#run-the-weatherbas-application","title":"Run the WEATHER.BAS application","text":"<p>The WEATHER.BAS application reads weather and pollution data provided by Open Weather Map. Like the COUNT.BAS application, WEATHER.BAS uses Intel 8080 IO Ports to access the data.</p> <p></p> <p>The following BASIC program is the listing of WEATHER.BAS:</p> <pre><code>100 WIDTH 150\n200 PRINT \"====================================================\"\n300 PRINT \"OPEN WEATHER MAP IOT APP\"\n400 SECONDS% = 10\n500 WEATHERKEY = 34\n600 WEATHERVALUE = 35\n700 WEATHERITEMS = 6\n800 LOCATIONKEY = 36\n900 LOCATIONVALUE = 37\n1000 LOCATIONITEMS = 4\n1100 POLLUTIONKEY = 38\n1200 POLLUTIONVALUE = 39\n1300 POLLUTIONITEMS = 9\n1400 PRINT \"PUBLISH WEATHER DATA TO IOT CENTRAL EVERY\";SECONDS%;\"SECONDS\"\n1500 RCOUNT% = 0\n1600 READING# = 0\n1700 WHILE 1\n1800 READING# = READING# + 1\n1900 PRINT \"============================================================================================================================\"\n2000 PORT = 43 : GOSUB 4300 : TIME$ = RSTRING$\n2100 PRINT \"Reading\", \"Time\"\n2200 PRINT READING#,  TIME$\n2300 ITEMKEY = WEATHERKEY : ITEMVALUE = WEATHERVALUE : ITEMS = WEATHERITEMS : GOSUB 3300\n2400 PRINT\n2500 ITEMKEY = POLLUTIONKEY : ITEMVALUE = POLLUTIONVALUE : ITEMS = POLLUTIONITEMS : GOSUB 3300\n2600 PRINT\n2700 ITEMKEY = LOCATIONKEY : ITEMVALUE = LOCATIONVALUE : ITEMS = LOCATIONITEMS : GOSUB 3300\n2800 PRINT\n2900 GOSUB 5400 : REM PUBLISH WEATHER DATA\n3000 GOSUB 5000 : REM SLEEP\n3100 WEND\n3200 END\n3300 REM PRINT ITEM KEY VALUE PAIRS\n3400 PRINT\n3500 FOR I = 1 TO ITEMS\n3600 PORT = ITEMKEY : PDATA = I - 1 : GOSUB 4300 : PRINT RSTRING$, \n3700 NEXT I\n3800 PRINT\n3900 FOR I = 1 TO ITEMS\n4000 PORT = ITEMVALUE : PDATA = I - 1 : GOSUB 4300 : PRINT RSTRING$, \n4100 NEXT I\n4200 RETURN\n4300 REM SUBROUTINE READS STRING DATA FROM PORT UNTIL NULL CHARACTER\n4400 OUT PORT, PDATA\n4500 RSTRING$ = \"\"\n4600 C=INP(200)\n4700 IF C = 0 THEN RETURN\n4800 RSTRING$ = RSTRING$ + CHR$(C)\n4900 GOTO 4600\n5000 PRINT \"\" : PRINT CHR$(27) + \"[31;22;24m\" + \"Sleep for\"; SECONDS% ; \"seconds.\" + CHR$(27) + \"[0m\"\n5100 OUT 30, SECONDS%\n5200 IF INP(30) = 1 THEN GOTO 5200\n5300 RETURN\n5400 REM PUBLISH WEATHER DATA\n5500 REM WAIT FOR PUBLISH WEATHER PENDING TO GO FALSE\n5600 WAIT 32, 1, 1\n5700 REM PUBLISH TO IOT CENTRAL WITH JITTER\n5800 OUT 32, 0\n5900 RETURN\n</code></pre> <p>When you run this application, weather and pollution data are published to Azure IoT Central. You can view the data in the Azure IoT Central web portal, from the Pollution and Weather tabs for your device.</p> <p></p>"},{"location":"60-programming/02-Microsoft-BASIC-programming/#generating-anomaly-weather-data","title":"Generating anomaly weather data","text":"<p>The anomaly app publishes weather data sourced from Open Weather Map to Azure IoT Central. The anomaly app adds random jitter values to the temperature. The jitter values are added to the temperature so you can see the effect of anomalies when using the Azure Anomaly Detection Cognitive Service.</p> <p></p> <pre><code>100 WIDTH 150\n200 PRINT \"====================================================\"\n300 PRINT \"OPEN WEATHER MAP IOT APP\"\n400 DELAY% = 10\n500 WEATHERPORT = 35\n600 LOCATIONPORT = 37\n700 POLLUTIONPORT = 39\n800 DEF FNNEXTJITTER(ROW#, DELAY%) = ROW# + 1 + (INT(RND * 60) * 180 / DELAY% )\n900 DEF FNJITTERTEMPERATURE(TEMPERATURE$) = VAL(TEMPERATURE$) + 30 - INT(RND * 20) : REM Return temperature plus random value\n1000 REM GET RANDOM NUMBER SEED FROM PLATFORM\n1100 PORT = 44 : GOSUB 4700 : RANDOMIZE VAL(RSTRING$)\n1200 PRINT \"SEND WEATHER DATA TO IOT CENTRAL EVERY\";DELAY%;\"SECONDS\"\n1300 RCOUNT# = 0\n1400 NEXTJITTER# = FNNEXTJITTER(RCOUNT#, DELAY%)\n1500 WHILE 1\n1600 RCOUNT# = RCOUNT# + 1\n1700 PRINT \"====================================================\"\n1800 PRINT CHR$(27) + \"[33;22;24m\" + \"Reading:\"; RCOUNT#; \"| Next jitter:\";NEXTJITTER#; \"| BASIC free memory:\"; FRE(0); CHR$(27) + \"[0m\"\n1900 REM GET TIME AS STRING\n2000 PORT = 43 : GOSUB 4700 : PRINT \"Time (local): \";RSTRING$\n2100 PORT = WEATHERPORT : PDATA = 0 : GOSUB 4700 : TEMPERATURE$ = RSTRING$\n2200 PORT = WEATHERPORT : PDATA = 1 : GOSUB 4700 : PRESSURE$ = RSTRING$\n2300 PORT = WEATHERPORT : PDATA = 2 : GOSUB 4700 : HUMIDITY$ = RSTRING$\n2400 PORT = POLLUTIONPORT : PDATA = 0 : GOSUB 4700 : AIRQUALITYINDEX$ = RSTRING$\n2500 PORT = LOCATIONPORT : PDATA = 0 : GOSUB 4700 : LATITUDE$ = RSTRING$\n2600 PORT = LOCATIONPORT : PDATA = 1 : GOSUB 4700 : LONGITUDE$ = RSTRING$\n2700 IF RCOUNT# = NEXTJITTER# THEN TEMPERATURE$ = STR$(FNJITTERTEMPERATURE(TEMPERATURE$)) : NEXTJITTER# = FNNEXTJITTER(RCOUNT#, DELAY%)\n2800 PRINT : PRINT \"Celsius\", \"Millibars\", \"Humidity %\", \"AQI (CAQI)\", \"Latitude\", \"Longitude\"\n2900 PRINT TEMPERATURE$, PRESSURE$, HUMIDITY$, AIRQUALITYINDEX$, LATITUDE$, LONGITUDE$\n3000 PRINT\n3100 GOSUB 3700 : REM Generate JSON\n3200 GOSUB 5900 : REM Publish JSON\n3300 PRINT: PRINT CHR$(27) + \"[31;22;24m\" + \"Sleep for\";DELAY%;\"seconds.\" + CHR$(27) + \"[0m\"\n3400 GOSUB 5400\n3500 WEND\n3600 END\n3700 REM BUILD JSON STRING\n3800 RJSON$ = \"{\"\n3900 RJSON$ = RJSON$ + CHR$(34) + \"temperature\" + CHR$(34) + \":\" + TEMPERATURE$ + \",\"\n4000 RJSON$ = RJSON$ + CHR$(34) + \"pressure\" + CHR$(34) + \":\" +  PRESSURE$ + \",\"\n4100 RJSON$ = RJSON$ + CHR$(34) + \"humidity\" + CHR$(34) + \":\" +  HUMIDITY$ + \",\"\n4200 RJSON$ = RJSON$ + CHR$(34) + \"latitude\" + CHR$(34) + \":\" +  LATITUDE$ + \",\"\n4300 RJSON$ = RJSON$ + CHR$(34) + \"longitude\" + CHR$(34) + \":\" +  LONGITUDE$ + \",\"\n4400 RJSON$ = RJSON$ + CHR$(34) + \"aqi\" + CHR$(34) + \":\" +  AIRQUALITYINDEX$\n4500 RJSON$ = RJSON$ + \"}\"\n4600 RETURN\n4700 REM SUBROUTINE READS STRING DATA FROM PORT UNTIL NULL CHARACTER\n4800 OUT PORT, PDATA\n4900 RSTRING$ = \"\"\n5000 C=INP(200)\n5100 IF C = 0 THEN RETURN\n5200 RSTRING$ = RSTRING$ + CHR$(C)\n5300 GOTO 5000\n5400 REM SUBROUTINE DELAYS PROGRAM EXECUTION BY DELAY% SECONDS\n5500 OUT 30, DELAY%\n5600 IF INP(30) = 1 THEN GOTO 5600\n5700 WAIT 31, 1, 1 : REM WAIT FOR PUBLISH JSON PENDING TO GO FALSE\n5800 RETURN\n5900 REM SUBROUTINE PUBLISHES JSON TO AZURE IOT\n6000 LENGTH% = LEN(RJSON$)\n6100 IF LENGTH% = 0 THEN RETURN\n6200 IF LENGTH% &gt; 256 THEN RETURN\n6300 PRINT CHR$(27) + \"[94;22;24m\" + \"PUBLISHING JSON TO AZURE IOT\" + CHR$(27) + \"[0m\"\n6400 PRINT RJSON$\n6500 FOR DATAINDEX% = 1 TO LENGTH%\n6600 OUT 31, ASC(MID$(RJSON$, DATAINDEX%, 1))\n6700 NEXT DATAINDEX%\n6800 OUT 31, 0 : REM TERMINATING NULL CAUSE PUBLISH TO AZURE IOT\n6900 RETURN\n</code></pre>"},{"location":"60-programming/02-Microsoft-BASIC-programming/#font-support","title":"Font support","text":"<p>The following example shows how to use the Intel 8080 IO ports to display characters on the Pi Sense HAT or Retro Click 8x8 LED panels. To understand IO ports, refer to the io_ports.c source code.</p> <pre><code>100 REM 8x8 LED Panel Demo\n200 OUT 80,1 : REM Flip the 8x8 LED panel to FONT mode\n300 FOR J = 1 TO 10\n400 FOR I = 33 TO 122\n500 OUT 81, I MOD 3 : REM Cycle font color\n600 OUT 85, I : REM Display character on the 8x8 LED panel\n700 PRINT CHR$(I)\n800 OUT 29, 250 : WAIT 29, 1, 1 : REM Pause for 250 milliseconds\n900 NEXT I\n1000 NEXT J\n1100 OUT 80,0\n</code></pre>"},{"location":"60-programming/03-C-programming/","title":"C Programming","text":"<p>The BD Software C compiler is included on drive A: or drive B: if you have the CP/M filesystem loaded on the Micro SD card. The following text is an exert from the BDS C Wikipedia article.</p> <p>BDS C (or the BD Software C Compiler) is a compiler for a sizeable subset of the C programming language, that ran on and generated code for the Intel 8080 and Zilog Z80 processors. It was the first C compiler for CP/M. It was written by Leor Zolman and first released in 1979 when he was 20 years old. \"BDS\" stands for \"Brain Damage Software.\"</p>"},{"location":"60-programming/03-C-programming/#bds-c-users-guide","title":"BDS C User's Guide","text":"<p>Refer to the BDS C User's Guide for more about the language and its implementation.</p> <p>BDS C Symbol Length Limitations</p> <p>BDS C is an early implementation of the C programming language. The biggest gotcha is that all identifiers/symbols are unique to 7 characters. For example, the following two variables are treated as the same symbol:</p> <pre><code>int variable1;\nint variable2;\n</code></pre> <p>Both are treated as <code>variabl</code>. So, be careful when naming variables, functions, and other symbols as you get no compiler warnings or errors and your application will behave unexpectedly.</p> <p>BDS C Creating and Initializing Variables</p> <p>BDS C does not support creating and initializing global variables in one step. For example, the following code will not compile:</p> <pre><code>int count = 0; // This will not compile\n</code></pre> <p>Instead, you must create and initialize global variables in two steps:</p> <pre><code>int count; // Create the variable\n\nmain()\n{\n    count = 0; // Initialize the variable\n    ...\n}\n</code></pre>"},{"location":"60-programming/03-C-programming/#compile-c-applications","title":"Compile C applications","text":"<p>The CP/M disk image includes a simple HW.C (Hello, world) application. BDS C language has support for Intel 8080 CPU input and output port instructions. The HW.C application displays the system tick count, UTC, and local date and time, and then sleeps for 1 second. For more information about Intel 8080 IO port mappings, refer to Intel 8080 input and output ports.</p> <p>Follow these steps to list, compile, link, and run the HW.C file:</p> <ol> <li> <p>List the hw.c file</p> <pre><code>type hw.c\n</code></pre> <pre><code>/* Copyright (c) Microsoft Corporation. All rights reserved.\n   Licensed under the MIT License. */\n\n/* C application to demonstrate use of Intel 8080 IO Ports */\n\nmain()\n{\n    unsigned c, l;\n    char buffer[50];\n\n    printf(\"\\nHello from the Altair 8800 emulator\\n\\n\");\n\n    for (c = 0; c &lt; 65535; c++)\n    {\n        printf(\"Count:%u\\n\", c);\n        printf(\"System tick count: %s\\n\", get_port_data(41, buffer, 50));\n        printf(\"UTC date and time: %s\\n\", get_port_data(42, buffer, 50));\n        printf(\"Local date and time: %s\\n\\n\", get_port_data(43, buffer, 50));\n\n        sleep(1); /* Sleep for 1 second */\n    }\n}\n\n/* Sleep for n seconds */\nsleep(seconds)\nchar seconds;\n{\n    outp(30, seconds); /* Enable sleep for N seconds */\n    while (inp(30)); /* Wait for sleep to expire */\n}\n\n/* Get data from Intel 8080 IO port */\nchar *get_port_data(port_num, buffer, buffer_len)\nint port_num;\nchar *buffer;\nint buffer_len;\n{\n    char ch;\n    int index;\n\n    index = 0;\n\n    while ((ch = inp(port_num)) &amp;&amp; index &lt; buffer_len) {\n        buffer[index++] = ch;\n    }\n    buffer[index] = 0x00;\n\n    return buffer;\n}\n</code></pre> </li> <li> <p>Compile the hw.c file:</p> <pre><code>cc hw\n</code></pre> </li> <li> <p>Link the hw application:</p> <pre><code>clink hw\n</code></pre> </li> <li> <p>Run the hw application:</p> <pre><code>hw\n</code></pre> </li> <li> <p>Stop the hw application by selecting Ctrl+C.</p> </li> </ol>"},{"location":"60-programming/03-C-programming/#editing-files","title":"Editing files","text":"<p>See Editing Files for details about transferring, editing, compiling, and running C source files.</p>"},{"location":"60-programming/04-Assembly-programming/","title":"Intel 8080 Assembler","text":"<p>The following text is an exert from the Assembly language article.</p> <p>In computer programming, assembly language (or assembler language), sometimes abbreviated asm, is any low-level programming language in which there is a very strong correspondence between the instructions in the language and the architecture's machine code instructions. Assembly language usually has one statement per machine instruction (1:1), but constants, comments, assembler directives, and symbolic labels of, e.g., memory locations, registers, and macros are generally also supported.</p>"},{"location":"60-programming/04-Assembly-programming/#intel-8080-assembly-language-programming-manual","title":"Intel 8080 Assembly Language Programming Manual","text":"<p>Refer to the Intel 8080 Assembly Language Programming Manual for more about the language and its implementation.</p> <p>Intel 8080 Assembly Language Symbol Length Limitation</p> <p>The biggest gotcha is that all identifiers/symbols are unique to 6 characters. For example, the following two variables are treated as the same symbol:</p> <pre><code>VARIAB1: DB 0\nVARIAB2: DB 0  \n</code></pre> <p>Both are treated as <code>VARIAB</code>. So, be careful when naming variables, functions, and other symbols as you get no assembler warnings or errors and your application will behave unexpectedly.</p>"},{"location":"60-programming/04-Assembly-programming/#assemble-assembly-applications","title":"Assemble assembly applications","text":"<p>The CP/M disk image includes two demo assembly applications, DEMO.ASM and SLEEP.ASM. Follow these steps to edit, assemble, and load the demo file:</p>"},{"location":"60-programming/04-Assembly-programming/#the-demoasm-example","title":"The DEMO.ASM example","text":"<ol> <li> <p>List the DEMO.ASM file</p> <pre><code>type sleep.asm\n</code></pre> <pre><code>        ORG     0100H           ; CP/M base of TPA (transient program area)\n        OUT     30\n        MVI     C,09H           ; Print string function\n        LXI     D,MESSAGE       ; Point\n        CALL    0005H           ; Call bdos\n        RET                     ; To cp/m\nMESSAGE:DB      0DH,0AH,'Hello, World!',0DH,0AH,'$'\n        END\n</code></pre> </li> <li> <p>Assemble the DEMO.ASM file:</p> <pre><code>asm demo\n</code></pre> </li> <li> <p>Load and link the assembled code:</p> <pre><code>load demo\n</code></pre> </li> <li> <p>Run the demo application:</p> <pre><code>demo\n</code></pre> </li> </ol>"},{"location":"60-programming/04-Assembly-programming/#edit-a-file-with-word-master","title":"Edit a file with Word-Master","text":"<p>in the following steps use the Word-Master text editor to edit a file. It's highly recommended to edit files with Visual Studio Code and then copy the file to the Altair filesystem using the CP/M gf command.</p> <ol> <li> <p>Edit the DEMO.ASM file with Word-Master:</p> <pre><code>wm demo.asm\n</code></pre> </li> <li> <p>Switch the web terminal to character input mode by selecting Ctrl+L.</p> </li> <li> <p>Edit the demo.asm file. For example, change Hello, World! text to your name.</p> </li> <li> <p>Save your updates to the demo.asm file:</p> <ol> <li>Select the Esc key.</li> <li>Select E to exit. Your file changes are saved to disk.</li> </ol> </li> <li> <p>Switch the web terminal to line input mode by selecting Ctrl+L.</p> </li> <li>Then assemble, load, and run the updated demo.asm application.</li> </ol>"},{"location":"60-programming/04-Assembly-programming/#sleep-assembly-example","title":"Sleep assembly example","text":"<p>The SLEEP.ASM example uses Intel 8080 input and output port instructions. The SLEEP.ASM application sets a sleep period of 2 seconds using output port 30, waits on input port 30 for the delay period to expire, and then publishes weather data to Azure IoT Central. For more information about Intel 8080 IO port mappings, refer to Intel 8080 input and output ports.</p> <ol> <li> <p>List the SLEEP.ASM file</p> <pre><code>type sleep.asm\n</code></pre> <pre><code>      ORG 0100H   ;CP/M base of TPA (transient program area)\n      MVI C,09H   ;Print string function\n      LXI D,MSG   ;Point to waiting message\n      CALL 0005H  ;Call bdos\n      MVI A,2     ;Move 2 to the accumulator to set a 2 second delay\n      OUT 30      ;Start timer\nLOOP: IN 30       ;Get delay timer state into the accumulator\n      CPI 00H     ;If accumulator equal to 0 then timer has expired\n      JZ BACK     ;Jump on zero\n      JMP LOOP\nBACK: MVI C,09H   ;Print string function\n      LXI D,PUB   ;Point to publish message\n      CALL 0005H  ;Call bdos\n      MVI A,0H    ;Move zero to the accumulator\n      OUT 32      ;Publish to Azure IoT Central\n      MVI C,09H   ;Print string function\n      LXI D,FINI  ;Point to Finished message\n      CALL 0005H  ;Call Bdos\n      RET\nMSG:  DB 'Sleeping 2 seconds$'\nFINI: DB 0DH,0AH,'Finished$'\nPUB:  DB 0DH,0AH,'Publishing to Azure IoT Central$' \n      END\n</code></pre> </li> <li> <p>Assemble the SLEEP.ASM file:</p> <pre><code>asm sleep\n</code></pre> </li> <li> <p>Load and link the assembled code:</p> <pre><code>load sleep\n</code></pre> </li> <li> <p>Run the demo application:</p> <pre><code>sleep\n</code></pre> </li> </ol>"},{"location":"60-programming/05-Altair-BASIC-programming/","title":"Altair BASIC Programming","text":"<p>Bill Gates and Paul Allen wrote Altair BASIC. It was Microsoft's first product. At the time, Altair BASIC was a huge step forward as it allowed people to write programs using a high-level programming language. For more information about Altair BASIC, see the Altair BASIC reference manual.</p> <p>By default Altair emulator boots CP/M. CP/M is more flexible and you can save files. That said, it's fun to fire up the original Altair BASIC, just keep in mind that you can't save Altair BASIC applications.</p>"},{"location":"60-programming/05-Altair-BASIC-programming/#boot-altair-basic","title":"Boot Altair BASIC","text":"<p>To load Altair BASIC, follow these instructions.</p> <ol> <li>From the web terminal, select Ctrl+M to enter the CPU monitor.</li> <li>Type basic, followed by Enter to boot Altair BASIC.</li> <li> <p>You will be prompted for the following information:</p> <ul> <li>MEMORY SIZE?: Select the Enter key to accept the default.</li> <li>TERMINAL  WIDTH?: Select the Enter key to accept the default.</li> <li>WANT SIN-COS-TAN-ATN?: Enter <code>Y</code> or <code>N</code>.</li> </ul> <p>Altair BASIC responds with the amount of memory and version information.</p> </li> </ol>"},{"location":"60-programming/05-Altair-BASIC-programming/#write-and-run-an-altair-basic-app","title":"Write and run an Altair BASIC app","text":"<ol> <li>From the web terminal, enter the following code to create an Altair BASIC application:</li> </ol> <pre><code>10 for i = 1 to 1000\n20 print i\n30 next i\n</code></pre> <ol> <li>Run the program by entering the following command:</li> </ol> <pre><code>run\n</code></pre> <p>Your program counts to 1,000.</p>"},{"location":"60-programming/05-Altair-BASIC-programming/#learn-useful-commands","title":"Learn useful commands","text":"<p>As you work with Altair BASIC, you'll likely use these commands often:</p> <ul> <li>loadx : Loads a sample application into MBASIC memory</li> <li>list : Lists application code</li> <li>run : Runs the loaded application</li> <li>new : Clears the current application from MBASIC memory</li> </ul> <p>Also, remember that you can use the Ctrl+C keyboard shortcut to stop a program.</p>"},{"location":"60-programming/05-Altair-BASIC-programming/#load-and-run-an-application","title":"Load and run an application","text":"<p>There are several preloaded Altair BASIC applications:</p> <ul> <li>STARTREK.BAS</li> <li>TICTACTOE.BAS</li> <li>SIMPLE.BAS</li> <li>LOOPY.BAS</li> <li>COUNT.BAS</li> </ul> <p>To load and run one of them:</p> <ol> <li>Enter <code>loadx</code> followed by the application name in quotation marks. For example, for the Tic-Tac-Toe application, enter the following command:</li> </ol> <pre><code>loadx \"TICTACTOE.BAS\"\n</code></pre> <ol> <li>Run the application by using the following command:</li> </ol> <pre><code>run\n</code></pre> <ol> <li>The application starts, and you're prompted to go first:</li> </ol> <pre><code>*** WELCOME TO TIC-TAC-TOE ***\n&gt; YOU ARE X's &lt;\nDO YOU WANT TO GO FIRST?\n</code></pre>"},{"location":"60-programming/06-Front-panel-programming/","title":"Front Panel Programming","text":"<p>The original Altair 8800 was programmed directly on the front panel. It was a painstaking, error-prone process to load and run a program. The Altair 8800 had a series of LEDs and switches for loading apps and determining the state of the machine.</p> <p></p> <p>Altair 8800 image attribution - Smithsonian Museum</p> <p>Programming the Altair emulator by using the front panel and Intel opcodes is a great way for you to understand how computers work.</p>"},{"location":"60-programming/06-Front-panel-programming/#raspberry-pi-sense-hat-led-panel","title":"Raspberry Pi Sense HAT LED Panel","text":"<p>Programming the Altair emulator with the virtual front panel is best experienced running the Altair emulator on a Raspberry Pi with a Pi Sense HAT attached.</p>"},{"location":"60-programming/06-Front-panel-programming/#virtual-front-panel","title":"Virtual front panel","text":"<p>The Altair Web Terminal Must Be in Line Mode</p> <p>To access the virtual front panel, the Altair web terminal must be in Line mode. To toggle between Line mode and Character mode, select Ctrl+L or click the Toggle Line/Character Mode button in the web terminal toolbar.</p> <p>To access the virtual front panel, you must be connected to the Altair emulator via the web terminal.</p> <p>In the following procedure, you're directly setting memory addresses. You might overwrite something important and crash the Altair emulator. If this happens, just reboot the Altair and experiment again.</p> <ol> <li>From the web terminal, select Ctrl+M to enter the CPU monitor.</li> <li>You can enter binary strings to represent the switches on a real Altair front panel. For example, if you type 0000000011110000 and then select the Enter key, you set 12 switches off and 4 switches on.</li> </ol> <p>Use the following letters to emulate the Altair front panel switches:     * e = EXAMINE     * en = EXAMINE NEXT     * d = DEPOSIT     * dn = DEPOSIT NEXT     * s = SINGLE STEP</p> <ol> <li> <p>If you want to load the 3-byte Intel 8080 Jmp at address 0x0100, use the following sequence of commands. Be sure to select Enter after you finish typing each instruction.</p> <ol> <li>Enter 100000000 (0x0100).</li> <li>Enter e to set the CPU current instruction pointer to address 0x0100.</li> <li>Enter 11000011, the Intel 8080 opcode for Jmp.</li> <li>Enter d to deposit the instruction at address 0x0000.</li> <li>Enter 0 to set the low order address for the Jmp instruction.</li> <li>Enter dn to increment the CPU instruction pointer to the next address location and deposit the high-order byte of the Jmp instruction.</li> <li>Enter 0 to set the high order address for the Jmp instruction.</li> <li>Enter dn again to increment the CPU instruction pointer to the next address location and deposit the high-order byte of the Jmp instruction.</li> </ol> </li> <li> <p>To execute the instructions that you entered:</p> <ol> <li>Enter 100000000 (0x0100).</li> <li>Enter e to set the CPU instruction pointer to address 0x0100.</li> <li>Enter s to SINGLE STEP the CPU.</li> <li> <p>Enter s again to SINGLE STEP the CPU. The CPU address is now s0x0000 after execution of the jump to address 0x0000.</p> <pre><code>Single step: Address bus: 00000000 00000000 (0x0000), Data bus 11000011 (0xc3), JMP adr          (3 byte instruction)\n</code></pre> </li> </ol> </li> <li> <p>To exit the CPU monitor, select Ctrl+M.</p> </li> </ol>"},{"location":"60-programming/06-Front-panel-programming/#the-list-virtual-front-panel-command","title":"The List virtual front panel command","text":"<p>This is an extended Altair front panel command.</p> <p>The List command will disassemble the next 20 Intel 8080 instructions from the current CPU instruction pointer set by the EXAMINE switch. To use the List command follow these steps.</p> <ol> <li> <p>From the web terminal, list the DEMO.ASM file. Note the first instruction, this application will be loaded at address 0100H (100000000 binary)</p> <pre><code>type demo.asm\n</code></pre> <pre><code>        ORG     0100H           ; CP/M base of TPA (transient program area)\n        OUT     30\n        MVI     C,09H           ; Print string function\n        LXI     D,MESSAGE       ; Point\n        CALL    0005H           ; Call bdos\n        RET                     ; To cp/m\nMESSAGE:DB      0DH,0AH,'Hello, World!',0DH,0AH,'$'\n        END\n</code></pre> </li> <li> <p>Run the demo application, this will load the demo application at address 100H (100000000 binary) and then execute the application.</p> <pre><code>demo\n</code></pre> </li> <li> <p>From the web terminal, select Ctrl+M to enter the CPU monitor.</p> </li> <li> <p>Set the CPU instruction pointer to 100H, type 100000000, and then select Enter.</p> <pre><code>100000000\n</code></pre> <p>The CPU monitor will display the following text.</p> <pre><code>CPU MONITOR&gt; 100000000\n        Input: 00000001 00000000 (0x0100), NOP (1 byte instruction)\n</code></pre> </li> <li> <p>Flick the virtual EXAMINE switch by typing E followed by Enter. This will set the CPU's current instruction pointer to 100H. The CPU monitor will display the following text.</p> <pre><code>CPU MONITOR&gt; e\n        Examine: Address bus: 0000000100000000 (0x0100), Data bus 11010011 (0xd3), OUT D8           (2 byte instruction)\n</code></pre> </li> <li> <p>Type L, and press Enter. This will disassemble the next 20 Intel 8080 instructions. Compare the disassembly with the code in DEMO.ASM.</p> <p>Note, that the CPU instruction pointer will be returned to 100H after the disassembly.</p> <pre><code>Disassemble: Address bus: 0000000100000000 (0x0100), Data bus 11010011 (0xd3), OUT D8           (2 byte instruction)\nDisassemble: Address bus: 0000000100000001 (0x0101), Data bus 00011110 (0x1e)\nDisassemble: Address bus: 0000000100000010 (0x0102), Data bus 00001110 (0x0e), MVI C,D8         (2 byte instruction)\nDisassemble: Address bus: 0000000100000011 (0x0103), Data bus 00001001 (0x09)\nDisassemble: Address bus: 0000000100000100 (0x0104), Data bus 00010001 (0x11), LXI D,D16        (3 byte instruction)\nDisassemble: Address bus: 0000000100000101 (0x0105), Data bus 00001011 (0x0b)\nDisassemble: Address bus: 0000000100000110 (0x0106), Data bus 00000001 (0x01)\nDisassemble: Address bus: 0000000100000111 (0x0107), Data bus 11001101 (0xcd), CALL adr         (3 byte instruction)\nDisassemble: Address bus: 0000000100001000 (0x0108), Data bus 00000101 (0x05)\nDisassemble: Address bus: 0000000100001001 (0x0109), Data bus 00000000 (0x00)\nDisassemble: Address bus: 0000000100001010 (0x010a), Data bus 11001001 (0xc9), RET              (1 byte instruction)\nDisassemble: Address bus: 0000000100001011 (0x010b), Data bus 00001101 (0x0d), DCR C            (1 byte instruction)\nDisassemble: Address bus: 0000000100001100 (0x010c), Data bus 00001010 (0x0a), LDAX B           (1 byte instruction)\nDisassemble: Address bus: 0000000100001101 (0x010d), Data bus 01001000 (0x48), MOV C,B          (1 byte instruction)\nDisassemble: Address bus: 0000000100001110 (0x010e), Data bus 01100101 (0x65), MOV H,L          (1 byte instruction)\nDisassemble: Address bus: 0000000100001111 (0x010f), Data bus 01101100 (0x6c), MOV L,H          (1 byte instruction)\nDisassemble: Address bus: 0000000100010000 (0x0110), Data bus 01101100 (0x6c), MOV L,H          (1 byte instruction)\nDisassemble: Address bus: 0000000100010001 (0x0111), Data bus 01101111 (0x6f), MOV L,A          (1 byte instruction)\nDisassemble: Address bus: 0000000100010010 (0x0112), Data bus 00101100 (0x2c), INR L            (1 byte instruction)\nDisassemble: Address bus: 0000000100010011 (0x0113), Data bus 00100000 (0x20), -                (0 byte instruction)\nDisassemble: Address bus: 0000000100010100 (0x0114), Data bus 01010111 (0x57), MOV D,A          (1 byte instruction)\nDisassemble: Address bus: 0000000100010101 (0x0115), Data bus 01101111 (0x6f), MOV L,A          (1 byte instruction)\nDisassemble: Address bus: 0000000100010110 (0x0116), Data bus 01110010 (0x72), MOV M,D          (1 byte instruction)\nDisassemble: Address bus: 0000000100010111 (0x0117), Data bus 01101100 (0x6c), MOV L,H          (1 byte instruction)\nDisassemble: Address bus: 0000000100011000 (0x0118), Data bus 01100100 (0x64), MOV H,H          (1 byte instruction)\nDisassemble: Address bus: 0000000100011001 (0x0119), Data bus 00100001 (0x21), LXI H,D16        (3 byte instruction)\nDisassemble: Address bus: 0000000100011010 (0x011a), Data bus 00001101 (0x0d)\nDisassemble: Address bus: 0000000100011011 (0x011b), Data bus 00001010 (0x0a)\n</code></pre> </li> <li> <p>From the web terminal, select Ctrl+M to exit the CPU monitor. This will resume code execution from the current CPU instruction pointer. Depending on what you have been changing in memory, you may need to restart CP/M.</p> </li> </ol>"},{"location":"60-programming/06-Front-panel-programming/#the-trace-virtual-front-panel-command","title":"The Trace virtual front panel command","text":"<p>This is an extended Altair front panel command.</p> <p>The trace command disassembles while executing the next 20 instructions from the current CPU instruction point. When the trace completes, the current CPU instruction pointer will point to the next instruction to be executed.</p> <ol> <li> <p>Run the demo application, this will load the demo application at address 100H (100000000 binary) and then execute the application.</p> <pre><code>demo\n</code></pre> </li> <li> <p>From the web terminal, select Ctrl+M to enter the CPU monitor.</p> </li> <li> <p>Set the CPU instruction pointer to 100H, type and then press Enter.</p> <pre><code>100000000\n</code></pre> <p>The CPU monitor will display the following text.</p> <pre><code>CPU MONITOR&gt; 100000000\n        Input: 00000001 00000000 (0x0100), NOP (1 byte instruction)\n</code></pre> </li> <li> <p>Flick the virtual EXAMINE switch by typing E followed by Enter. This will set the CPU's current instruction pointer to 100H. The CPU monitor will display the following text.</p> <pre><code>CPU MONITOR&gt; e\n        Examine: Address bus: 0000000100000000 (0x0100), Data bus 11010011 (0xd3), OUT D8           (2 byte instruction)\n</code></pre> </li> <li> <p>Type T, and press Enter. This will start a trace of the next 20 Intel 8080 instructions, following the execution path of the code in memory.</p> <pre><code>Trace: Address bus: 0000000100000000 (0x0100), Data bus 11010011 (0xd3), OUT D8           (2 byte instruction)\nTrace: Address bus: 0000000100000001 (0x0101), Data bus 00011110 (0x1e)\nTrace: Address bus: 0000000100000010 (0x0102), Data bus 00001110 (0x0e), MVI C,D8         (2 byte instruction)\nTrace: Address bus: 0000000100000011 (0x0103), Data bus 00001001 (0x09)\nTrace: Address bus: 0000000100000100 (0x0104), Data bus 00010001 (0x11), LXI D,D16        (3 byte instruction)\nTrace: Address bus: 0000000100000101 (0x0105), Data bus 00001011 (0x0b)\nTrace: Address bus: 0000000100000110 (0x0106), Data bus 00000001 (0x01)\nTrace: Address bus: 0000000100000111 (0x0107), Data bus 11001101 (0xcd), CALL adr         (3 byte instruction)\nTrace: Address bus: 0000000100001000 (0x0108), Data bus 00000101 (0x05)\nTrace: Address bus: 0000000100001001 (0x0109), Data bus 00000000 (0x00)\nTrace: Address bus: 0000000000000101 (0x0005), Data bus 11000011 (0xc3), JMP adr          (3 byte instruction)\nTrace: Address bus: 0000000000000110 (0x0006), Data bus 00000110 (0x06)\nTrace: Address bus: 0000000000000111 (0x0007), Data bus 11100111 (0xe7)\nTrace: Address bus: 1110011100000110 (0xe706), Data bus 11000011 (0xc3), JMP adr          (3 byte instruction)\nTrace: Address bus: 1110011100000111 (0xe707), Data bus 00010001 (0x11)\nTrace: Address bus: 1110011100001000 (0xe708), Data bus 11100111 (0xe7)\nTrace: Address bus: 1110011100010001 (0xe711), Data bus 11101011 (0xeb), XCHG             (1 byte instruction)\nTrace: Address bus: 1110011100010010 (0xe712), Data bus 00100010 (0x22), SHLD adr         (3 byte instruction)\nTrace: Address bus: 1110011100010011 (0xe713), Data bus 01000011 (0x43)\nTrace: Address bus: 1110011100010100 (0xe714), Data bus 11101010 (0xea)\nTrace: Address bus: 1110011100010101 (0xe715), Data bus 11101011 (0xeb), XCHG             (1 byte instruction)\nTrace: Address bus: 1110011100010110 (0xe716), Data bus 01111011 (0x7b), MOV A,E          (1 byte instruction)\nTrace: Address bus: 1111010011010110 (0xf4d6), Data bus 00001011 (0x0b), DCX B            (1 byte instruction)\nTrace: Address bus: 1110011100011010 (0xe71a), Data bus 00100001 (0x21), LXI H,D16        (3 byte instruction)\nTrace: Address bus: 1110011100011011 (0xe71b), Data bus 00000000 (0x00)\nTrace: Address bus: 1110011100011100 (0xe71c), Data bus 00000000 (0x00)\nTrace: Address bus: 1110011100011101 (0xe71d), Data bus 00100010 (0x22), SHLD adr         (3 byte instruction)\nTrace: Address bus: 1110011100011110 (0xe71e), Data bus 01000101 (0x45)\nTrace: Address bus: 1110011100011111 (0xe71f), Data bus 11101010 (0xea)\nTrace: Address bus: 1110011100100000 (0xe720), Data bus 00111001 (0x39), DAD SP           (1 byte instruction)\nTrace: Address bus: 1110011100100001 (0xe721), Data bus 00100010 (0x22), SHLD adr         (3 byte instruction)\nTrace: Address bus: 1110011100100010 (0xe722), Data bus 00001111 (0x0f)\nTrace: Address bus: 1110011100100011 (0xe723), Data bus 11101010 (0xea)\nTrace: Address bus: 1110011100100100 (0xe724), Data bus 00110001 (0x31), LXI SP, D16      (3 byte instruction)\nTrace: Address bus: 1110011100100101 (0xe725), Data bus 01000001 (0x41)\nTrace: Address bus: 1110011100100110 (0xe726), Data bus 11101010 (0xea)\nTrace: Address bus: 1110011100100111 (0xe727), Data bus 10101111 (0xaf), XRA A            (1 byte instruction)\nTrace: Address bus: 1111010011100000 (0xf4e0), Data bus 00000000 (0x00), NOP              (1 byte instruction)\nTrace: Address bus: 1111010011011110 (0xf4de), Data bus 00000000 (0x00), NOP              (1 byte instruction)\nTrace: Address bus: 1110011100101110 (0xe72e), Data bus 00100001 (0x21), LXI H,D16        (3 byte instruction)\nTrace: Address bus: 1110011100101111 (0xe72f), Data bus 01110100 (0x74)\nTrace: Address bus: 1110011100110000 (0xe730), Data bus 11110100 (0xf4)\n</code></pre> </li> <li> <p>From the web terminal, select Ctrl+M to exit the CPU monitor. This will resume code execution from the current CPU instruction pointer. Depending on what you have been changing in memory, you may need to reboot CP/M.</p> </li> </ol>"},{"location":"60-programming/06-Front-panel-programming/#loop-example","title":"Loop example","text":"<p><code>`text Disassemble: Address bus: 0000000100000000 (0x0100), Data bus 11000011 (0xc3), JMP adr          (3 byte instruction) Disassemble: Address bus: 0000000100000001 (0x0101), Data bus 00000011 (0x03) Disassemble: Address bus: 0000000100000010 (0x0102), Data bus 00000001 (0x01) Disassemble: Address bus: 0000000100000011 (0x0103), Data bus 11000011 (0xc3), JMP adr          (3 byte instruction) Disassemble: Address bus: 0000000100000100 (0x0104), Data bus 00000000 (0x00) Disassemble: Address bus: 0000000100000101 (0x0105), Data bus 00000001 (0x01)</code></p>"}]}